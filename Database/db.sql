/*
SQLyog Community Edition- MySQL GUI v6.07
Host - 5.5.30 : Database - revisitation
*********************************************************************
Server version : 5.5.30
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

create database if not exists `revisitation`;

USE `revisitation`;

/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

/*Table structure for table `child_1` */

DROP TABLE IF EXISTS `child_1`;

CREATE TABLE `child_1` (
  `child_1` varchar(100) NOT NULL,
  PRIMARY KEY (`child_1`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `child_1` */

insert  into `child_1`(`child_1`) values ('Busy'),('Relaxed');

/*Table structure for table `child_2` */

DROP TABLE IF EXISTS `child_2`;

CREATE TABLE `child_2` (
  `level_1` varchar(110) DEFAULT NULL,
  `level_2` varchar(110) NOT NULL,
  PRIMARY KEY (`level_2`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `child_2` */

insert  into `child_2`(`level_1`,`level_2`) values ('Relaxed','listening music'),('Busy','Programming'),('Busy','ReadWrite');

/*Table structure for table `child_3` */

DROP TABLE IF EXISTS `child_3`;

CREATE TABLE `child_3` (
  `level_1` varchar(110) DEFAULT NULL,
  `level_2` varchar(110) DEFAULT NULL,
  `level_3` varchar(110) NOT NULL,
  PRIMARY KEY (`level_3`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `child_3` */

insert  into `child_3`(`level_1`,`level_2`,`level_3`) values ('Busy','Programming','Editplus'),('Busy','Programming','netbeans'),('Busy','Programming','Tomcat'),('Relaxed','listening music','vlc'),('Busy','ReadWrite','Winword'),('Relaxed','listening music','wmplayer');

/*Table structure for table `context` */

DROP TABLE IF EXISTS `context`;

CREATE TABLE `context` (
  `uid` int(11) NOT NULL,
  `uri` varchar(1000) NOT NULL,
  `year_` varchar(100) NOT NULL,
  `month_` varchar(100) NOT NULL,
  `month2_` varchar(100) NOT NULL,
  `date_` varchar(100) NOT NULL,
  `location` varchar(500) NOT NULL,
  `user_` varchar(100) NOT NULL,
  `seconds` int(11) DEFAULT NULL,
  `data_` longtext,
  `title_` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `context` */

insert  into `context`(`uid`,`uri`,`year_`,`month_`,`month2_`,`date_`,`location`,`user_`,`seconds`,`data_`,`title_`) values (1,'bits-pilani.ac.in/pilani/overview','2019','November','Early November','3/11/2019','Office','sajid24x7@gmail.com',88,'BITS Pilani Our Campus Overview Awards & Accreditations Trade Marks Faculty & Student Achievements Offices & Administration How to reach Pilani campus? Sustainable Environment at Campus Overview Awards & Accreditations Trade Marks Faculty & Student Achievements Offices & Administration How to reach Pilani campus? Sustainable Environment at Campus Overview Awards & Accreditations Trade Marks Faculty & Student Achievements Offices & Administration How to reach Pilani campus? Sustainable Environment at Campus Overview Awards & Accreditations Trade Marks Faculty & Student Achievements Offices & Administration How to reach Pilani campus? Sustainable Environment at Campus Overview Awards & Accreditations Trade Marks Faculty & Student Achievements Offices & Administration How to reach Pilani campus? Sustainable Environment at Campus Overview Awards & Accreditations Trade Marks Faculty & Student Achievements Offices & Administration How to reach Pilani campus? Sustainable Environment at Campus Overview Awards & Accreditations Trade Marks Faculty & Student Achievements Offices & Administration How to reach Pilani campus? Sustainable Environment at Campus Academics Integrated First Degree Overview B.E.(Hons.) B.Pharm.(Hons.) M.Sc.(Hons.) M.Sc.General Studies Higher Degree Overview M.E. M.Pharm. MBA Doctoral Programmes Overview Features Research Areas On Campus Ph.D Off Campus Ph.D Part Time Ph.D. Integrated First Degree Overview B.E.(Hons.) B.Pharm.(Hons.) M.Sc.(Hons.) M.Sc.General Studies Higher Degree Overview M.E. M.Pharm. MBA Doctoral Programmes Overview Features Research Areas On Campus Ph.D Off Campus Ph.D Part Time Ph.D. Integrated First Degree Overview B.E.(Hons.) B.Pharm.(Hons.) M.Sc.(Hons.) M.Sc.General Studies Higher Degree Overview M.E. M.Pharm. MBA Doctoral Programmes Overview Features Research Areas On Campus Ph.D Off Campus Ph.D Part Time Ph.D. Academic Departments Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Overview Biological Sciences Chemical Engineering Chemistry Civil Engineering Computer Science & Information Systems Economics & Finance Electrical & Electronics Engineering Humanities and Social Sciences Mathematics Management Mechanical Engineering Pharmacy Physics Research & Innovation Overview Research & Consultancy Seminars & Workshops R & D Centres Chapters Sponsored Projects Patents Overview Research & Consultancy Seminars & Workshops R & D Centres Chapters Sponsored Projects Patents Overview Research & Consultancy Seminars & Workshops R & D Centres Chapters Sponsored Projects Patents Overview Research & Consultancy Seminars & Workshops R & D Centres Chapters Sponsored Projects Patents Overview Research & Consultancy Seminars & Workshops R & D Centres Chapters Sponsored Projects Patents Overview Research & Consultancy Seminars & Workshops R & D Centres Chapters Sponsored Projects Patents Overview Research & Consultancy Seminars & Workshops R & D Centres Chapters Sponsored Projects Patents Centres Overview Centre for Software Development Centre for Educational Technology Centre for Robotics & Intelligent Systems Centre for Desert Development Technologies Centre for Entrepreneurial Leadership Centre for Professional Development Technology Business Incubator Teaching Learning Centre Overview Centre for Software Development Centre for Educational Technology Centre for Robotics & Intelligent Systems Centre for Desert Development Technologies Centre for Entrepreneurial Leadership Centre for Professional Development Technology Business Incubator Teaching Learning Centre Overview Centre for Software Development Centre for Educational Technology Centre for Robotics & Intelligent Systems Centre for Desert Development Technologies Centre for Entrepreneurial Leadership Centre for Professional Development Technology Business Incubator Teaching Learning Centre Overview Centre for Software Development Centre for Educational Technology Centre for Robotics & Intelligent Systems Centre for Desert Development Technologies Centre for Entrepreneurial Leadership Centre for Professional Development Technology Business Incubator Teaching Learning Centre Overview Centre for Software Development Centre for Educational Technology Centre for Robotics & Intelligent Systems Centre for Desert Development Technologies Centre for Entrepreneurial Leadership Centre for Professional Development Technology Business Incubator Teaching Learning Centre Overview Centre for Software Development Centre for Educational Technology Centre for Robotics & Intelligent Systems Centre for Desert Development Technologies Centre for Entrepreneurial Leadership Centre for Professional Development Technology Business Incubator Teaching Learning Centre Overview Centre for Software Development Centre for Educational Technology Centre for Robotics & Intelligent Systems Centre for Desert Development Technologies Centre for Entrepreneurial Leadership Centre for Professional Development Technology Business Incubator Teaching Learning Centre Overview Centre for Software Development Centre for Educational Technology Centre for Robotics & Intelligent Systems Centre for Desert Development Technologies Centre for Entrepreneurial Leadership Centre for Professional Development Technology Business Incubator Teaching Learning Centre Overview Centre for Software Development Centre for Educational Technology Centre for Robotics & Intelligent Systems Centre for Desert Development Technologies Centre for Entrepreneurial Leadership Centre for Professional Development Technology Business Incubator Teaching Learning Centre Placements Overview Why Recruit from BITS Placement Process List of Recruiters Degree Programs Contact Us Overview Why Recruit from BITS Placement Process List of Recruiters Degree Programs Contact Us Overview Why Recruit from BITS Placement Process List of Recruiters Degree Programs Contact Us Overview Why Recruit from BITS Placement Process List of Recruiters Degree Programs Contact Us Overview Why Recruit from BITS Placement Process List of Recruiters Degree Programs Contact Us Overview Why Recruit from BITS Placement Process List of Recruiters Degree Programs Contact Us For Students Student Activities Events & Festivals BITScan BITS Embryo Picture Gallery BITS BEAT Convocation 2019 Student Achievements Student Services Academic Counseling Duplicate Transcript Request Student Facilities Student Welfare Anti Ragging Procedure for Issuance of Duplicate Degree Scrutiny of Grades Online Application for FD Projects (intranet only) Information for Prospective Students Student Activities Events & Festivals BITScan BITS Embryo Picture Gallery BITS BEAT Convocation 2019 Student Achievements Student Services Academic Counseling Duplicate Transcript Request Student Facilities Student Welfare Anti Ragging Procedure for Issuance of Duplicate Degree Scrutiny of Grades Online Application for FD Projects (intranet only) Information for Prospective Students University Home Admissions BITSAT WILP P S Library Alumni Careers e-Services Last updated on Wednesday, April 19, 2017 You are here: Home Our CampusOverview Campus Overview Innovate. Achieve. Lead show more About the Campus We are Birla Institute of Technology and Science, Pilani (BITS Pilani), one of India’s leading higher education institutes and a deemed university under Sec. 3 of the UGC act. Our campus at Pilani (Rajasthan) was set up in technical collaboration with MIT (USA), under the Ford Foundation Grant and later was deemed to be a university in 1964. Covered with wooded paths and spread over 328 acres, the campus is self contained and houses all the amenities and buildings that befit an institute of international standards. The programmes are fully residential with 11 hostels for boys and one hostel complex for girls. Around 4500 students live on campus along with 350 faculty members, their family and a vast pool of support staff. The campus also boasts of a magnificent library complex with a floor area of 65,000 sq. ft and a rich collection of about 2,30,000 volumes of books and manuscripts. An intellectual powerhouse, the campus has successfully attracted healthy amounts of research funding from government grants and private bodies. The research facilities are wide ranging, with a number of laboratories focussed on all aspects of science and technology. The campus boasts of a state-of-the art network that provides connectivity to the entire institute. show more Our Mission BITS mission is to advance knowledge and educate students in science, technology, and other areas of scholarship that will best serve the nation and the world in the 21st century. The Institute is committed to generating, disseminating, and preserving knowledge, and to working with others to bring this knowledge to bear on the world\'s great challenges. BITS is dedicated to providing its students with an education that combines rigorous academic study and the excitement of discovery with the support and intellectual stimulation of a diverse campus community. We seek to develop in each member of the BITS community the ability and passion to work wisely, creatively, and effectively for the betterment of humankind. show more Our Vision Our commitment to transparency and stress on equal opportunity has been a key contributing factor behind our emergence as an institute of national repute, our rigorous intake process rewards only merit and ensures that only truly motivated students join us. Our curriculum is continuously being innovated and refreshed to reflect the latest developments in technology and trends within industry. Pure academics are supplemented by pervasive industry engagement and every student is exposed to practical applications of classroom knowledge under a structured semester-long engagement programme. show more Our Policy The pursuit of excellence requires a transparent and honest approach. At BITS Pilani, we have always believed this to be true and are one of the few top institutes in India to favour a ‘Merit Only’ based admission policy. To ensure complete transparency in student intake in the undergraduate courses we have instituted BITSAT, a fully online exam. BITSAT tests students on their aptitude for Mathematics, Physics and Chemistry. BITSAT also has a section on English and Logical reasoning, thus becoming a complete analysis of a candidate’s intelligence and capability. Director\'s Message Prof. Ashoke Kumar Sarkar BITS Pilani is a renowned institute offering higher education in the fields of science, engineering, pharmacy and management. A deemed university since 1964, BITS Pilani has a history spanning more than a century. Students Achievements Citi Women Leader Award 2016-17 Ms. Vidhi Jain (ID No.2014A7PS113) was declared as the Winner of the \'Citi Women Leader Award 2016-17\' on 7th March, 2017 at Citi Group\'s First International Financial Center in BKC, Mumbai. Citi India shall provide her scholarship to support one year of her study at BITS Pilani.   Read More BITS, Pilani Students Shine in Sports Tournament “SPORTECH” held at IIT Delhi SPORTECH\'17 - A sports was organised by IIT, Delhi during 24th - 27th February, 2017 in which 48 colleges and around 1600 students from various parts of the country participated. Out of these, 149 students were from BITS Pilani campus, Rajasthan. They won Gold, Silver and Bronze medals in various categories.   Read More BITS Pilani Student Team wins Silver Position in National KPIT Sparkle 2017 A student team from BITS Pilani, comprising of Mr. Vandit Gandotra (Project Lead), Mr. Piyush Sharda and Mr. Tanmay Sharma from the Dept. of Electrical & Electronics, bagged the Silver position in National KPIT Sparkle 2017- Smart City Innovation Challenge.    Read More Roshni Chabra Receives Mahindra Transport Excellence Award for Short Story Five best stories from 4000 entries were selected for Mahindra Transport Excellence Awards. Roshni Chhabra, a student of BITS Pilani (Chemical Engineering) was one of the five shortlisted writers. The award ceremony was held on 3rd February 2017 at The Hotel Ashoka, New Delhi. Shri. Nitin Gadkari, Hon. Minister of Ministry of Road Transport and Highways, Government of India, graced the occasion as the Chief Guest.   Read More Young F1 car designers gear up for international contest A team of 20 students from BITS Pilani, Dubai, designed UAE\'s first Formula 1 car, student race car. Recently the team also won at the Innovator Show 2016 in Abu Dhabi. Dh 200,000 was spent in total for designing and manufacturing the car. The team is also going to show case  their latest car at Formula SAE in Germany next year. India\'s Official First Aid App Launched Six students from BITS PILANI, i.e.  Tushar Dhalwani (Pilani Campus), Rishabh Garg (Pilani Campus), Bhuvan Gupta (Goa Campus), Akanksha Pandey(Hyderabad Campus), Shrey Bansal (Hyderabad Campus), Rahul Mittal(Hyderabad Campus) have created India’s Official First Aid Mobile Application as their summer internship project from 23rd May -16th July, 2016 at Indian Red Cross Society, NHQ, New Delhi.    Read More Three BITS, Pilani Students Win the Aditya Birla Group Scholarship Three students from BITS, Pilani - one each from Pilani Campus (2016A7PS019P-Mr. Tanay Sharma), Goa Campus (2016A7PS004G-Mr. Dinku Sarmah) and Hyderabad Campus (2016A7PS001H-Ms.Sandhya Biksham Preethi Sharma) are selected for the 18th Aditya Birla Scholarship Programme – Class of 2016-17.  Five BITS, Pilani Students Win O.P. Jindal Engineering & Management Scholarships Five students from BITS, Pilani have won OPJEM scholarships- 2016, worth Rs. 80,000 each. They are Harsh Sharma (2014A4PS405P), Sishir Suresh Mohammed (2015A4PS136P), Pragyan Trivedi Priyamedh (2013A4PS063P), Prithu Mitash (2013A4PS392P) and Prateek Arora (2014A2PS556P). AcYut wins Internationally Humanoid AcYut 4 developed by BITS students won awards in both Robocup Iran 2011 held in Teheran on 5-9 April 2011 and Robogames 2011 held in San Franscisco on 15-17 April 2011. All Terrain Vehicle Gaurav Baheti and Anirudh Singh secured 10th place in the All India content for designing all Terrain Vehicle in 2010. Image Gallery Work and Play at the Pilani Campus Quick Links Useful Links Learning Resources Placements Careers BITSAT Practice School WILP Convocation 2019 Academic Counseling Cell International Programmes and Collaboration Division GMAT Test Centre Important Links ERP Procedure for Issuance of Duplicate Degree Procedure for verification of BITS Pilani, Pilani Campus Ex-Employees Campus e-Services BITS Mail Students\'Corner Agreement with Medanta MOU with Durlabhji Hospital Jaipur SC/ST Cell Downloads Introducing BITS to Prospective Faculty BITSAT 2019 Brochure BITS IT Policy Contacts Pilani Campus Dubai Campus K K Birla Goa Campus Hyderabad Campus An institution deemed to be a University estd. vide Sec.3 of the UGC Act,1956 under notification # F.12-23/63.U-2 of Jun 18,1964 © 2019 BITS Pilani | Contact us : webmaster@pilani.bits-pilani.ac.in Designed and developed by fractal | ink design studios','Campus Overview'),(2,'www.tutorialspoint.com/java/index.htm','2019','November','Early November','2/11/2019','Office','sajid24x7@gmail.com',78,'Home Jobs Tools Coding Ground Current Affairs UPSC Notes Online Tutors Whiteboard Net Meeting Tutorix Categories Academic Tutorials Big Data & Analytics Computer Programming Computer Science Databases DevOps Digital Marketing Engineering Tutorials Exams Syllabus Famous Monuments GATE Exams Tutorials Latest Technologies Machine Learning Mainframe Development Management Tutorials Mathematics Tutorials Microsoft Technologies Misc tutorials Mobile Development Java Technologies Python Technologies SAP Tutorials Programming Scripts Selected Reading Software Quality Soft Skills Telecom Tutorials UPSC IAS Exams Web Development Sports Tutorials XML Technologies Multi-Language Interview Questions Library Videos Q/A eBooks Library Videos eBooks Java Tutorial Java - Home Java - Overview Java - Environment Setup Java - Basic Syntax Java - Object & Classes Java - Constructors Java - Basic Datatypes Java - Variable Types Java - Modifier Types Java - Basic Operators Java - Loop Control Java - Decision Making Java - Numbers Java - Characters Java - Strings Java - Arrays Java - Date & Time Java - Regular Expressions Java - Methods Java - Files and I/O Java - Exceptions Java - Inner classes Java Object Oriented Java - Inheritance Java - Overriding Java - Polymorphism Java - Abstraction Java - Encapsulation Java - Interfaces Java - Packages Java Advanced Java - Data Structures Java - Collections Java - Generics Java - Serialization Java - Networking Java - Sending Email Java - Multithreading Java - Applet Basics Java - Documentation Java Useful Resources Java - Questions and Answers Java - Quick Guide Java - Useful Resources Java - Discussion Java - Examples Selected Reading UPSC IAS Exams Notes Developer\'s Best Practices Questions and Answers Effective Resume Writing HR Interview Questions Computer Glossary Who is Who Java Tutorial PDF Version Quick Guide Resources Job Search Discussion Java is a high-level programming language originally developed by Sun Microsystems and released in 1995. Java runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX. This tutorial gives a complete understanding of Java. This reference will take you through simple and practical approaches while learning Java Programming language. Why to Learn java Programming? Java is a MUST for students and working professionals to become a great Software Engineer specially when they are working in Software Development Domain. I will list down some of the key advantages of learning Java Programming: Object Oriented ? In Java, everything is an Object. Java can be easily extended since it is based on the Object model. Platform Independent ? Unlike many other programming languages including C and C++, when Java is compiled, it is not compiled into platform specific machine, rather into platform independent byte code. This byte code is distributed over the web and interpreted by the Virtual Machine (JVM) on whichever platform it is being run on. Simple ? Java is designed to be easy to learn. If you understand the basic concept of OOP Java, it would be easy to master. Secure ? With Java\'s secure feature it enables to develop virus-free, tamper-free systems. Authentication techniques are based on public-key encryption. Architecture-neutral ? Java compiler generates an architecture-neutral object file format, which makes the compiled code executable on many processors, with the presence of Java runtime system. Portable ? Being architecture-neutral and having no implementation dependent aspects of the specification makes Java portable. Compiler in Java is written in ANSI C with a clean portability boundary, which is a POSIX subset. Robust ? Java makes an effort to eliminate error prone situations by emphasizing mainly on compile time error checking and runtime checking. Hello World using Java Programming. Just to give you a little excitement about Java programming, I\'m going to give you a small conventional C Programming Hello World program, You can try it using Demo link. Live Demo \npublic class MyFirstJavaProgram {\n\n   /* This is my first java program.\n    * This will print \'Hello World\' as the output\n    */\n\n   public static void main(String []args) {\n      System.out.println(\"Hello World\"); // prints Hello World\n   }\n}\n Applications of Java Programming The latest release of the Java Standard Edition is Java SE 8. With the advancement of Java and its widespread popularity, multiple configurations were built to suit various types of platforms. For example: J2EE for Enterprise Applications, J2ME for Mobile Applications. The new J2 versions were renamed as Java SE, Java EE, and Java ME respectively. Java is guaranteed to be Write Once, Run Anywhere. Multithreaded ? With Java\'s multithreaded feature it is possible to write programs that can perform many tasks simultaneously. This design feature allows the developers to construct interactive applications that can run smoothly. Interpreted ? Java byte code is translated on the fly to native machine instructions and is not stored anywhere. The development process is more rapid and analytical since the linking is an incremental and light-weight process. High Performance ? With the use of Just-In-Time compilers, Java enables high performance. Distributed ? Java is designed for the distributed environment of the internet. Dynamic ? Java is considered to be more dynamic than C or C++ since it is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time. Audience This tutorial has been prepared for the beginners to help them understand the basic to advanced concepts related to Java Programming language. Prerequisites Before you start practicing various types of examples given in this reference, we assume that you are already aware about computer programs and computer programming languages. Previous Page Print Page Next Page   Advertisements About us Terms of use Privacy Policy FAQ\'s Helping Contact © Copyright 2019. All Rights Reserved.','Java Tutorial - Tutorialspoint'),(3,'www.javatpoint.com/java-swing','2019','November','Early November','2/11/2019','Office','sajid24x7@gmail.com',99,'? Home Java C C++ C# Servlet JSP EJB Struts2 Mail Hibernate Spring Android Design P Quiz Projects Interview Q Comment Forum Training Basics of Java OOPs Concepts Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing Swing Introduction Java JButton Java JLabel Java JTextField Java JTextArea Java JPasswordField Java JCheckBox Java JRadioButton Java JComboBox Java JTable Java JList Java JOptionPane Java JScrollBar Java JMenuItem & JMenu Java JPopupMenu Java JCheckBoxMenuItem Java JSeparator Java JProgressBar Java JTree Java JColorChooser Java JTabbedPane Java JSlider Java JSpinner Java JDialog Java JPanel Java JFileChooser Java JToggleButton Java JToolBar Java JViewport Java JFrame Java JComponent Java JLayeredPane Java JDesktopPane Java JEditorPane Java JScrollPane Java JSplitPane Java JTextPane Java JRootPane Using ToolTip Change Title Icon Executable Jar File Digital Watch Graphics in swing Displaying Image Java Swing Apps Notepad Calculator IP Finder Word Counter URL Source Generator Folder Explorer Puzzle Game Pic Puzzle Game Tic Tac Toe Game Online Exam LayoutManagers BorderLayout GridLayout FlowLayout BoxLayout CardLayout GridBagLayout GroupLayout SpringLayout ScrollPaneLayout JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? ? prev Java Swing Tutorial Java Swing tutorial is a part of Java Foundation Classes (JFC) that is used to create window-based applications. It is built on the top of AWT (Abstract Windowing Toolkit) API and entirely written in java. Unlike AWT, Java Swing provides platform-independent and lightweight components. The javax.swing package provides classes for java swing API such as JButton, JTextField, JTextArea, JRadioButton, JCheckbox, JMenu, JColorChooser etc. Difference between AWT and Swing There are many differences between java awt and swing that are given below. No. Java AWT Java Swing 1) AWT components are platform-dependent. Java swing components are platform-independent. 2) AWT components are heavyweight. Swing components are lightweight. 3) AWT doesn\'t support pluggable look and feel. Swing supports pluggable look and feel. 4) AWT provides less components than Swing. Swing provides more powerful components such as tables, lists, scrollpanes, colorchooser, tabbedpane etc. 5) AWT doesn\'t follows MVC(Model View Controller) where model represents data, view represents presentation and controller acts as an interface between model and view. Swing follows MVC. What is JFC The Java Foundation Classes (JFC) are a set of GUI components which simplify the development of desktop applications. Do You Know How to create runnable jar file in java? How to display image on a button in swing? How to change the component color by choosing a color from ColorChooser ? How to display the digital watch in swing tutorial ? How to create a notepad in swing? How to create puzzle game and pic puzzle game in swing ? How to create tic tac toe game in swing ? Hierarchy of Java Swing classes The hierarchy of java swing API is given below. Commonly used Methods of Component class The methods of Component class are widely used in java swing that are given below. Method Description public void add(Component c) add a component on another component. public void setSize(int width,int height) sets size of the component. public void setLayout(LayoutManager m) sets the layout manager for the component. public void setVisible(boolean b) sets the visibility of the component. It is by default false. Java Swing Examples There are two ways to create a frame: By creating the object of Frame class (association) By extending Frame class (inheritance) We can write the code of swing inside the main(), constructor or any other method. Simple Java Swing Example Let\'s see a simple swing example where we are creating one button and adding it on the JFrame object inside the main() method. File: FirstSwingExample.java import javax.swing.*; public class FirstSwingExample { public static void main(String[] args) { JFrame f=new JFrame();//creating instance of JFrame JButton b=new JButton(\"click\");//creating instance of JButton b.setBounds(130,100,100, 40);//x axis, y axis, width, height f.add(b);//adding button in JFrame f.setSize(400,500);//400 width and 500 height f.setLayout(null);//using no layout managers f.setVisible(true);//making the frame visible } } Example of Swing by Association inside constructor We can also write all the codes of creating JFrame, JButton and method call inside the java constructor. File: Simple.java import javax.swing.*; public class Simple { JFrame f; Simple(){ f=new JFrame();//creating instance of JFrame JButton b=new JButton(\"click\");//creating instance of JButton b.setBounds(130,100,100, 40); f.add(b);//adding button in JFrame f.setSize(400,500);//400 width and 500 height f.setLayout(null);//using no layout managers f.setVisible(true);//making the frame visible } public static void main(String[] args) { new Simple(); } } The setBounds(int xaxis, int yaxis, int width, int height)is used in the above example that sets the position of the button. Simple example of Swing by inheritance We can also inherit the JFrame class, so there is no need to create the instance of JFrame class explicitly. File: Simple2.java import javax.swing.*; public class Simple2 extends JFrame{//inheriting JFrame JFrame f; Simple2(){ JButton b=new JButton(\"click\");//create button b.setBounds(130,100,100, 40); add(b);//adding button on frame setSize(400,500); setLayout(null); setVisible(true); } public static void main(String[] args) { new Simple2(); }} download this example What we will learn in Swing Tutorial JButton class JRadioButton class JTextArea class JComboBox class JTable class JColorChooser class JProgressBar class JSlider class Digital Watch Graphics in swing Displaying image Edit menu code for Notepad OpenDialog Box Notepad Puzzle Game Pic Puzzle Game Tic Tac Toe Game BorderLayout GridLayout FlowLayout CardLayout Next TopicJava JButton Class ? prev next ? Please Share Join Javatpoint Test Series Placement Papers TCS HCL Infosys IBM Accenture AMCAT eLitmas Java Python C Programming Networking Bank PO/Clerk UPSSSC Government Exams SSC Civil Services SBI GATE NEET CAT Railway CTET IIT JEE Learn Latest Tutorials Tensorflow Data Mining Xamarin Ansible Matplotlib Wireshark Git Jupyter R Bash Pygame Log4j Preparation Aptitude Reasoning Verbal A. Interview Company Trending Technologies AI AWS Selenium IoT Cloud Hadoop ReactJS React Native Node.js D. Science Angular 7 Blockchain B.Tech / MCA DBMS DS DAA OS C. Network Compiler D. COA D. Math. E. Hacking C. Graphics Software E. Web Tech. Cyber Sec. Automata C C++ Java .Net Python Programs Control S. Javatpoint Services JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comHindi-typing.comShayaree.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap © Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.','Java Swing Tutorial - javatpoint'),(4,'en.wikipedia.org/wiki/Java_(programming_language)','2019','November','Early November','2/11/2019','Office','sajid24x7@gmail.com',49,'Java (programming language) From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article is about a programming language. For the software platform, see Java (software platform). For the software package downloaded from java.com, see Java Platform, Standard Edition. For other uses, see Java (disambiguation). Not to be confused with JavaScript. Object-oriented programming language Java Paradigm Multi-paradigm: generic, object-oriented (class-based), imperative, reflective Designed by James Gosling Developer Sun Microsystems First appeared May 23, 1995; 24 years ago (1995-05-23)[1] Stable release Java SE 13 / September 17, 2019; 48 days ago (2019-09-17) Typing discipline Static, strong, safe, nominative, manifest Filename extensions .java, .class, .jar Website oracle.com/java/ Major implementations Compilers: OpenJDK (javac, sjavac), GNU Compiler for Java (GCJ), Eclipse Compiler for Java (ECJ) Virtual machines: OpenJDK JRE, Oracle JRockit, Azul Zing, IBM J9, Excelsior JET, Gluon VM, Microsoft JVM, Apache Harmony JIT compilers: HotSpot, GraalVM, Azul Falcon (LLVM) Influenced by Ada 83, C++,[2] C#,[3] Eiffel,[4] Mesa,[5] Modula-3,[6] Oberon,[7] Objective-C,[8] UCSD Pascal,[9][10] Object Pascal[11] Influenced Ada 2005, BeanShell, C#, Chapel,[12] Clojure, ECMAScript, Fantom, Gambas,[13] Groovy, Hack,[14] Haxe, J#, Kotlin, PHP, Python, Scala, Seed7, Vala Java Programming at Wikibooks Java is a general-purpose programming language that is class-based, object-oriented, and designed to have as few implementation dependencies as possible. It is intended to let application developers write once, run anywhere (WORA),[15] meaning that compiled Java code can run on all platforms that support Java without the need for recompilation.[16] Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of the underlying computer architecture. The syntax of Java is similar to C and C++, but it has fewer low-level facilities than either of them. As of 2019[update], Java was one of the most popular programming languages in use according to GitHub,[17][18] particularly for client-server web applications, with a reported 9 million developers.[19] Java was originally developed by James Gosling at Sun Microsystems (which has since been acquired by Oracle) and released in 1995 as a core component of Sun Microsystems\' Java platform. The original and reference implementation Java compilers, virtual machines, and class libraries were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the Java Community Process, Sun had relicensed most of its Java technologies under the GNU General Public License. Meanwhile, others have developed alternative implementations of these Sun technologies, such as the GNU Compiler for Java (bytecode compiler), GNU Classpath (standard libraries), and IcedTea-Web (browser plugin for applets). The latest versions are Java 13, released in September 2019, and Java 11, a currently supported long-term support (LTS) version, released on September 25, 2018; Oracle released for the legacy Java 8 LTS the last free public update in January 2019 for commercial use, while it will otherwise still support Java 8 with public updates for personal use up to at least December 2020. Oracle (and others) highly recommend uninstalling older versions of Java because of serious risks due to unresolved security issues.[20] Since Java 9 (and 10 and 12) is no longer supported, Oracle advises its users to immediately transition to Java 11 (Java 13 is also a non-LTS option). Contents 1 History 1.1 Principles 1.2 Versions 2 Editions 3 Execution system 3.1 Java JVM and Bytecode 3.1.1 Performance 3.2 Non-JVM 3.3 Automatic memory management 4 Syntax 4.1 Hello world example 4.2 Example with methods 5 Special classes 5.1 Applet 5.2 Servlet 5.3 JavaServer Pages 5.4 Swing application 5.5 JavaFX application 5.6 Generics 6 Criticism 7 Class libraries 8 Documentation 9 Implementations 10 Use outside the Java platform 10.1 Android 10.1.1 Controversy 11 See also 11.1 Comparison of Java with other languages 12 Notes 13 References 14 External links History[edit] See also: Java (software platform) § History Duke, the Java mascot James Gosling, the creator of Java, in 2008 The TIOBE programming language popularity index graph from 2002 to 2018. Java is steadily on the top since mid-2015. James Gosling, Mike Sheridan, and Patrick Naughton initiated the Java language project in June 1991.[21] Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time.[22] The language was initially called Oak after an oak tree that stood outside Gosling\'s office. Later the project went by the name Green and was finally renamed Java, from Java coffee.[23] Gosling designed Java with a C/C++-style syntax that system and application programmers would find familiar.[24] Sun Microsystems released the first public implementation as Java 1.0 in 1996.[25] It promised Write Once, Run Anywhere (WORA), providing no-cost run-times on popular platforms. Fairly secure and featuring configurable security, it allowed network- and file-access restrictions. Major web browsers soon incorporated the ability to run Java applets within web pages, and Java quickly became popular. The Java 1.0 compiler was re-written in Java by Arthur van Hoff to comply strictly with the Java 1.0 language specification.[26] With the advent of Java 2 (released initially as J2SE 1.2 in December 1998 – 1999), new versions had multiple configurations built for different types of platforms. J2EE included technologies and APIs for enterprise applications typically run in server environments, while J2ME featured APIs optimized for mobile applications. The desktop version was renamed J2SE. In 2006, for marketing purposes, Sun renamed new J2 versions as Java EE, Java ME, and Java SE, respectively. In 1997, Sun Microsystems approached the ISO/IEC JTC 1 standards body and later the Ecma International to formalize Java, but it soon withdrew from the process.[27][28][29] Java remains a de facto standard, controlled through the Java Community Process.[30] At one time, Sun made most of its Java implementations available without charge, despite their proprietary software status. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System. On November 13, 2006, Sun released much of its Java virtual machine (JVM) as free and open-source software (FOSS), under the terms of the GNU General Public License (GPL). On May 8, 2007, Sun finished the process, making all of its JVM\'s core code available under free software/open-source distribution terms, aside from a small portion of code to which Sun did not hold the copyright.[31] Sun\'s vice-president Rich Green said that Sun\'s ideal role with regard to Java was as an evangelist.[32] Following Oracle Corporation\'s acquisition of Sun Micro-systems in 2009–10, Oracle has described itself as the steward of Java technology with a relentless commitment to fostering a community of participation and transparency.[33] This did not prevent Oracle from filing a lawsuit against Google shortly after that for using Java inside the Android SDK (see the Android section). Java software runs on everything from laptops to data centers, game consoles to scientific supercomputers.[34] On April 2, 2010, James Gosling resigned from Oracle.[35] In January 2016, Oracle announced that Java run-time environments based on JDK 9 will discontinue the browser plugin.[36] Principles[edit] There were five primary goals in the creation of the Java language:[16] It must be simple, object-oriented, and familiar. It must be robust and secure. It must be architecture-neutral and portable. It must execute with high performance. It must be interpreted, threaded, and dynamic. Versions[edit] Main article: Java version history As of March 2019[update], Java 8 is supported; and both Java 8 and 11 as Long Term Support (LTS) versions. Major release versions of Java, along with their release dates: JDK 1.0 (January 23, 1996)[37] JDK 1.1 (February 19, 1996) J2SE 1.2 (December 8, 1998) J2SE 1.3 (May 8, 2000) J2SE 1.4 (February 6, 2002) J2SE 5.0 (September 30, 2004) Java SE 6 (December 11, 2006) Java SE 7 (July 28, 2011) Java SE 8 (March 18, 2014) Java SE 9 (September 21, 2017) Java SE 10 (March 20, 2018) Java SE 11 (September , 2018)[38] Java SE 12 (March 19, 2019) Java SE 13 (September 17, 2019) Editions[edit] This article\'s factual accuracy may be compromised due to out-of-date information. Please update this article to reflect recent events or newly available information. (July 2019) See also: Free Java implementations § Class library Java platform editions Java Card Micro Edition (ME) Standard Edition (SE) Enterprise Edition (EE) JavaFX (bundled in JRE from 8 to 10 but separately for JavaFX 1.x, 2.x and 11) PersonalJava (Discontinued) v t e Sun has defined and supports four editions of Java targeting different application environments and segmented many of its APIs so that they belong to one of the platforms. The platforms are: Java Card for smart-cards.[39] Java Platform, Micro Edition (Java ME) – targeting environments with limited resources.[40] Java Platform, Standard Edition (Java SE) – targeting workstation environments.[41] Java Platform, Enterprise Edition (Java EE) – targeting large distributed enterprise or Internet environments.[42] The classes in the Java APIs are organized into separate groups called packages. Each package contains a set of related interfaces, classes, and exceptions. Refer to the separate platforms for a description of the packages available.[relevant to this section? – discuss] Sun also provided an edition called Personal Java that has been superseded by later, standards-based Java ME configuration-profile pairings. Execution system[edit] Java JVM and Bytecode[edit] Main articles: Java (software platform) and Java virtual machine One design goal of Java is portability, which means that programs written for the Java platform must run similarly on any combination of hardware and operating system with adequate run time support. This is achieved by compiling the Java language code to an intermediate representation called Java bytecode, instead of directly to architecture-specific machine code. Java bytecode instructions are analogous to machine code, but they are intended to be executed by a virtual machine (VM) written specifically for the host hardware. End users commonly use a Java Runtime Environment (JRE) installed on their own machine for standalone Java applications, or in a web browser for Java applets. Standard libraries provide a generic way to access host-specific features such as graphics, threading, and networking. The use of universal bytecode makes porting simple. However, the overhead of interpreting bytecode into machine instructions made interpreted programs almost always run more slowly than native executables. Just-in-time (JIT) compilers that compile byte-codes to machine code during runtime were introduced from an early stage. Java itself is platform-independent and is adapted to the particular platform it is to run on by a Java virtual machine for it, which translates the Java bytecode into the platform\'s machine language.[43] Performance[edit] Main article: Java performance Programs written in Java have a reputation for being slower and requiring more memory than those written in C++.[44][45] However, Java programs\' execution speed improved significantly with the introduction of just-in-time compilation in 1997/1998 for Java 1.1,[46] the addition of language features supporting better code analysis (such as inner classes, the StringBuilder class, optional assertions, etc.), and optimizations in the Java virtual machine, such as HotSpot becoming the default for Sun\'s JVM in 2000. With Java 1.5, the performance was improved with the addition of the java.util.concurrent package, including lock free implementations of the ConcurrentMaps and other multi-core collections, and it was improved further with Java 1.6. Non-JVM[edit] Some platforms offer direct hardware support for Java; there are micro controllers that can run Java bytecode in hardware instead of a software Java virtual machine,[47] and some ARM-based processors could have hardware support for executing Java bytecode through their Jazelle option, though support has mostly been dropped in current implementations of ARM. Automatic memory management[edit] Java uses an automatic garbage collector to manage memory in the object lifecycle. The programmer determines when objects are created, and the Java runtime is responsible for recovering the memory once objects are no longer in use. Once no references to an object remain, the unreachable memory becomes eligible to be freed automatically by the garbage collector. Something similar to a memory leak may still occur if a programmer\'s code holds a reference to an object that is no longer needed, typically when objects that are no longer needed are stored in containers that are still in use. If methods for a non-existent object are called, a null pointer exception is thrown.[48][49] One of the ideas behind Java\'s automatic memory management model is that programmers can be spared the burden of having to perform manual memory management. In some languages, memory for the creation of objects is implicitly allocated on the stack or explicitly allocated and deallocated from the heap. In the latter case, the responsibility of managing memory resides with the programmer. If the program does not deallocate an object, a memory leak occurs. If the program attempts to access or deallocate memory that has already been deallocated, the result is undefined and difficult to predict, and the program is likely to become unstable or crash. This can be partially remedied by the use of smart pointers, but these add overhead and complexity. Note that garbage collection does not prevent logical memory leaks, i.e. those where the memory is still referenced but never used. Garbage collection may happen at any time. Ideally, it will occur when a program is idle. It is guaranteed to be triggered if there is insufficient free memory on the heap to allocate a new object; this can cause a program to stall momentarily. Explicit memory management is not possible in Java. Java does not support C/C++ style pointer arithmetic, where object addresses can be arithmetically manipulated (e.g. by adding or subtracting an offset). This allows the garbage collector to relocate referenced objects and ensures type safety and security. As in C++ and some other object-oriented languages, variables of Java\'s primitive data types are either stored directly in fields (for objects) or on the stack (for methods) rather than on the heap, as is commonly true for non-primitive data types (but see escape analysis). This was a conscious decision by Java\'s designers for performance reasons. Java contains multiple types of garbage collectors. By default, HotSpot uses the parallel scavenge garbage collector.[50] However, there are also several other garbage collectors that can be used to manage the heap. For 90% of applications in Java, the Concurrent Mark-Sweep (CMS) garbage collector is sufficient.[51] Oracle aims to replace CMS with the Garbage-First Collector (G1).[52] Having solved the memory management problem does not relieve the programmer of the burden of handling properly other kind of resources, like network or database connections, file handles, etc., especially in the presence of exceptions. Paradoxically, the presence of a garbage collector has faded the necessity of having an explicit destructor method in the classes, thus rendering the management of these other resources more difficult. Syntax[edit] Main article: Java syntax Dependency graph of the Java Core classes (created with jdeps and Gephi) The syntax of Java is largely influenced by C++. Unlike C++, which combines the syntax for structured, generic, and object-oriented programming, Java was built almost exclusively as an object-oriented language.[16] All code is written inside classes, and every data item is an object, with the exception of the primitive data types, (i.e. integers, floating-point numbers, boolean values, and characters), which are not objects for performance reasons. Java reuses some popular aspects of C++ (such as the printf method). Unlike C++, Java does not support operator overloading[53] or multiple inheritance for classes, though multiple inheritance is supported for interfaces.[54] Java uses comments similar to those of C++. There are three different styles of comments: a single line style marked with two slashes (//), a multiple line style opened with /* and closed with */, and the Javadoc commenting style opened with /** and closed with */. The Javadoc style of commenting allows the user to run the Javadoc executable to create documentation for the program and can be read by some integrated development environments (IDEs) such as Eclipse to allow developers to access documentation within the IDE. Hello world example[edit] The traditional Hello world program can be written in Java as:[55] public class HelloWorldApp {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\"); // Prints the string to the console.\n    }\n}\n Source files must be named after the public class they contain, appending the suffix .java, for example, HelloWorldApp.java. It must first be compiled into bytecode, using a Java compiler, producing a file named HelloWorldApp.class. Only then can it be executed, or launched. The Java source file may only contain one public class, but it can contain multiple classes with a non-public access modifier and any number of public inner classes. When the source file contains multiple classes, it is necessary to make one class (introduced by the class keyword) public (preceded by the public keyword) and name the source file with that public class name. A class that is not declared public may be stored in any .java file. The compiler will generate a class file for each class defined in the source file. The name of the class file is the name of the class, with .class appended. For class file generation, anonymous classes are treated as if their name were the concatenation of the name of their enclosing class, a $, and an integer. The keyword public denotes that a method can be called from code in other classes, or that a class may be used by classes outside the class hierarchy. The class hierarchy is related to the name of the directory in which the .java file is located. This is called an access level modifier. Other access level modifiers include the keywords private and protected. The keyword static[17] in front of a method indicates a static method, which is associated only with the class and not with any specific instance of that class. Only static methods can be invoked without a reference to an object. Static methods cannot access any class members that are not also static. Methods that are not designated static are instance methods and require a specific instance of a class to operate. The keyword void indicates that the main method does not return any value to the caller. If a Java program is to exit with an error code, it must call System.exit() explicitly. The method name main is not a keyword in the Java language. It is simply the name of the method the Java launcher calls to pass control to the program. Java classes that run in managed environments such as applets and Enterprise JavaBeans do not use or need a main() method. A Java program may contain multiple classes that have main methods, which means that the VM needs to be explicitly told which class to launch from. The main method must accept an array of String objects. By convention, it is referenced as args although any other legal identifier name can be used. Since Java 5, the main method can also use variable arguments, in the form of public static void main(String... args), allowing the main method to be invoked with an arbitrary number of String arguments. The effect of this alternate declaration is semantically identical (to the args parameter which is still an array of String objects), but it allows an alternative syntax for creating and passing the array. The Java launcher launches Java by loading a given class (specified on the command line or as an attribute in a JAR) and starting its public static void main(String[]) method. Stand-alone programs must declare this method explicitly. The String[] args parameter is an array of String objects containing any arguments passed to the class. The parameters to main are often passed by means of a command line. Printing is part of a Java standard library: The System class defines a public static field called out. The out object is an instance of the PrintStream class and provides many methods for printing data to standard out, including println(String) which also appends a new line to the passed string. The string \"Hello World!\" is automatically converted to a String object by the compiler. Example with methods[edit] // This is an example of a single line comment using two slashes\n\n/* This is an example of a multiple line comment using the slash and asterisk.\n This type of comment can be used to hold a lot of information or deactivate\n code, but it is very important to remember to close the comment. */\n\npackage fibsandlies;\nimport java.util.HashMap;\n\n/**\n * This is an example of a Javadoc comment; Javadoc can compile documentation\n * from this text. Javadoc comments must immediately precede the class, method, or field being documented.\n */\npublic class FibCalculator extends Fibonacci implements Calculator {\n\n    private static Map<Integer, Integer> memoized = new HashMap<Integer, Integer>();\n\n    /*\n     * The main method written as follows is used by the JVM as a starting point for the program.\n     */\n    public static void main(String[] args) {\n        memoized.put(1, 1);\n        memoized.put(2, 1);\n        System.out.println(fibonacci(12)); //Get the 12th Fibonacci number and print to console\n    }\n\n    /**\n     * An example of a method written in Java, wrapped in a class.\n     * Given a non-negative number FIBINDEX, returns\n     * the Nth Fibonacci number, where N equals FIBINDEX.\n     * @param fibIndex The index of the Fibonacci number\n     * @return The Fibonacci number\n     */\n    public static int fibonacci(int fibIndex) {\n        if (memoized.containsKey(fibIndex)) {\n            return memoized.get(fibIndex);\n        } else {\n            int answer = fibonacci(fibIndex - 1) + fibonacci(fibIndex - 2);\n            memoized.put(fibIndex, answer);\n            return answer;\n        }\n    }\n}\n Special classes[edit] This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. Find sources: \"Java\" programming language – news · newspapers · books · scholar · JSTOR (May 2019) (Learn how and when to remove this template message) Applet[edit] Main article: Java applet Java applets were programs that were embedded in other applications, typically in a Web page displayed in a web browser. The Java applet API is now deprecated since Java 9 in 2017.[56] Servlet[edit] Main article: Java servlet Java servlet technology provides Web developers with a simple, consistent mechanism for extending the functionality of a Web server and for accessing existing business systems. Servlets are server-side Java EE components that generate responses (typically HTML pages) to requests (typically HTTP requests) from clients. The Java servlet API has to some extent been superseded by two standard Java technologies for web services: the Java API for RESTful Web Services (JAX-RS 2.0) useful for AJAX, JSON and REST services, and the Java API for XML Web Services (JAX-WS) useful for SOAP Web Services. JavaServer Pages[edit] Main article: JavaServer Pages JavaServer Pages (JSP) are server-side Java EE components that generate responses, typically HTML pages, to HTTP requests from clients. JSPs embed Java code in an HTML page by using the special delimiters <% and %>. A JSP is compiled to a Java servlet, a Java application in its own right, the first time it is accessed. After that, the generated servlet creates the response. Swing application[edit] Main article: Swing (Java) Swing is a graphical user interface library for the Java SE platform. It is possible to specify a different look and feel through the pluggable look and feel system of Swing. Clones of Windows, GTK+, and Motif are supplied by Sun. Apple also provides an Aqua look and feel for macOS. Where prior implementations of these looks and feels may have been considered lacking, Swing in Java SE 6 addresses this problem by using more native GUI widget drawing routines of the underlying platforms. JavaFX application[edit] Main article: JavaFX JavaFX is a software platform for creating and delivering desktop applications, as well as rich Internet applications (RIAs) that can run across a wide variety of devices. JavaFX is intended to replace Swing as the standard GUI library for Java SE, but both will be included for the foreseeable future. JavaFX has support for desktop computers and web browsers on Microsoft Windows, Linux, and macOS. JavaFX does not have support for native OS look and feels. Generics[edit] Main article: Generics in Java In 2004, generics were added to the Java language, as part of J2SE 5.0. Prior to the introduction of generics, each variable declaration had to be of a specific type. For container classes, for example, this is a problem because there is no easy way to create a container that accepts only specific types of objects. Either the container operates on all subtypes of a class or interface, usually Object, or a different container class has to be created for each contained class. Generics allow compile-time type checking without having to create many container classes, each containing almost identical code. In addition to enabling more efficient code, certain runtime exceptions are prevented from occurring, by issuing compile-time errors. If Java prevented all runtime type errors (ClassCastException\'s) from occurring, it would be type safe. In 2016, the type system of Java was proven unsound.[57] Criticism[edit] Main article: Criticism of Java Criticisms directed at Java include the implementation of generics,[58] speed,[59] the handling of unsigned numbers,[60] the implementation of floating-point arithmetic,[61] and a history of security vulnerabilities in the primary Java VM implementation HotSpot.[62] Class libraries[edit] Main article: Java Class Library The Java Class Library is the standard library, developed to support application development in Java. It is controlled by Sun Microsystems in cooperation with others through the Java Community Process program.[63] Companies or individuals participating in this process can influence the design and development of the APIs. This process has been a subject of controversy during the 2010s.[64] The class library contains features such as: The core libraries, which include: IO/NIO Networking Reflection Concurrency Generics Scripting/Compiler Functional programming (Lambda, Streaming) Collection libraries that implement data structures such as lists, dictionaries, trees, sets, queues and double-ended queue, or stacks[65] XML Processing (Parsing, Transforming, Validating) libraries Security[66] Internationalization and localization libraries[67] The integration libraries, which allow the application writer to communicate with external systems. These libraries include: The Java Database Connectivity (JDBC) API for database access Java Naming and Directory Interface (JNDI) for lookup and discovery RMI and CORBA for distributed application development JMX for managing and monitoring applications User interface libraries, which include: The (heavyweight, or native) Abstract Window Toolkit (AWT), which provides GUI components, the means for laying out those components and the means for handling events from those components The (lightweight) Swing libraries, which are built on AWT but provide (non-native) implementations of the AWT widgetry APIs for audio capture, processing, and playback JavaFX A platform dependent implementation of the Java virtual machine that is the means by which the bytecodes of the Java libraries and third party applications are executed Plugins, which enable applets to be run in web browsers Java Web Start, which allows Java applications to be efficiently distributed to end users across the Internet Licensing and documentation Documentation[edit] Main article: Javadoc Javadoc is a comprehensive documentation system, created by Sun Microsystems, used by many Java developers[by whom?]. It provides developers with an organized system for documenting their code. Javadoc comments have an extra asterisk at the beginning, i.e. the delimiters are /** and */, whereas the normal multi-line comments in Java are set off with the delimiters /* and */.[68] Implementations[edit] See also: Free Java implementations Oracle Corporation is the current owner of the official implementation of the Java SE platform, following their acquisition of Sun Microsystems on January 27, 2010. This implementation is based on the original implementation of Java by Sun. The Oracle implementation is available for Microsoft Windows (still works for XP, while only later versions are currently officially supported), macOS, Linux, and Solaris. Because Java lacks any formal standardization recognized by Ecma International, ISO/IEC, ANSI, or other third-party standards organization, the Oracle implementation is the de facto standard. The Oracle implementation is packaged into two different distributions: The Java Runtime Environment (JRE) which contains the parts of the Java SE platform required to run Java programs and is intended for end users, and the Java Development Kit (JDK), which is intended for software developers and includes development tools such as the Java compiler, Javadoc, Jar, and a debugger. Oracle has also released GraalVM, a high performance Java dynamic compiler and interpreter. OpenJDK is another notable Java SE implementation that is licensed under the GNU GPL. The implementation started when Sun began releasing the Java source code under the GPL. As of Java SE 7, OpenJDK is the official Java reference implementation. The goal of Java is to make all implementations of Java compatible. Historically, Sun\'s trademark license for usage of the Java brand insists that all implementations be compatible. This resulted in a legal dispute with Microsoft after Sun claimed that the Microsoft implementation did not support RMI or JNI and had added platform-specific features of their own. Sun sued in 1997, and, in 2001, won a settlement of US$20 million, as well as a court order enforcing the terms of the license from Sun.[69] As a result, Microsoft no longer ships Java with Windows. Platform-independent Java is essential to Java EE, and an even more rigorous validation is required to certify an implementation. This environment enables portable server-side applications. Use outside the Java platform[edit] The Java programming language requires the presence of a software platform in order for compiled programs to be executed. Oracle supplies the Java platform for use with Java. The Android SDK is an alternative software platform, used primarily for developing Android applications with its own GUI system. Android[edit] The Android operating system makes extensive use of Java-related technology The Java language is a key pillar in Android, an open source mobile operating system. Although Android, built on the Linux kernel, is written largely in C, the Android SDK uses the Java language as the basis for Android applications but does not use any of its standard GUI, SE, ME or other established Java standards[70]. The bytecode language supported by the Android SDK is incompatible with Java bytecode and runs on its own virtual machine, optimized for low-memory devices such as smartphones and tablet computers. Depending on the Android version, the bytecode is either interpreted by the Dalvik virtual machine or compiled into native code by the Android Runtime. Android does not provide the full Java SE standard library, although the Android SDK does include an independent implementation of a large subset of it. It supports Java 6 and some Java 7 features, offering an implementation compatible with the standard library (Apache Harmony). Controversy[edit] See also: Oracle America, Inc. v. Google, Inc. The use of Java-related technology in Android led to a legal dispute between Oracle and Google. On May 7, 2012, a San Francisco jury found that if APIs could be copyrighted, then Google had infringed Oracle\'s copyrights by the use of Java in Android devices.[71] District Judge William Haskell Alsup ruled on May 31, 2012, that APIs cannot be copyrighted,[72] but this was reversed by the United States Court of Appeals for the Federal Circuit in May 2014.[73] On May 26, 2016, the district court decided in favor of Google, ruling the copyright infringement of the Java API in Android constitutes fair use.[74] On March 2018, this ruling was overturned by the Appeals Court, which sent down the case of determining the damages to federal court in San Francisco.[75] Google filed a petition for writ of certiorari with the Supreme Court of the United States in January 2019 to challenge the two rulings that were made by the Appeals Court towards Oracle\'s favor.[76] See also[edit] Computer programming portal Book: Programming for Students C# C++ Dalvik, used in old Android versions, replaced by non-JIT Android Runtime Deterministic Parallel Java List of Java virtual machines List of Java APIs List of JVM languages Comparison of Java with other languages[edit] Comparison of C# and Java Comparison of Java and C++ Notes[edit] ^ Binstock, Andrew (May 20, 2015). \"Java\'s 20 Years of Innovation\". Forbes. Archived from the original on March 14, 2016. Retrieved March 18, 2016. ^ Chaudhary, Harry H. (July 28, 2014). \"Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans\". Retrieved May 29, 2016. ^ Java 5.0 added several new language features (the enhanced for loop, autoboxing, varargs and annotations), after they were introduced in the similar (and competing) C# language. [1] Archived March 19, 2011, at the Wayback Machine [2] Archived January 7, 2006, at the Wayback Machine ^ Gosling, James; McGilton, Henry (May 1996). \"The Java Language Environment\". Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad. \"The Java Language Specification, 2nd Edition\". Archived from the original on August 5, 2011. Retrieved February 8, 2008. ^ \"The A-Z of Programming Languages: Modula-3\". Computerworld.com.au. Archived from the original on January 5, 2009. Retrieved June 9, 2010. ^ Niklaus Wirth stated on a number of public occasions, e.g. in a lecture at the Polytechnic Museum, Moscow in September 2005 (several independent first-hand accounts in Russian exist, e.g. one with an audio recording: Filippova, Elena (September 22, 2005). \"Niklaus Wirth\'s lecture at the Polytechnic Museum in Moscow\". ), that the Sun Java design team licensed the Oberon compiler sources a number of years prior to the release of Java and examined it: a (relative) compactness, type safety, garbage collection, no multiple inheritance for classes – all these key overall design features are shared by Java and Oberon. ^ Patrick Naughton cites Objective-C as a strong influence on the design of the Java programming language, stating that notable direct derivatives include Java interfaces (derived from Objective-C\'s protocol) and primitive wrapper classes. [3] Archived July 13, 2011, at the Wayback Machine ^ TechMetrix Research (1999). \"History of Java\" (PDF). Java Application Servers Report. Archived from the original (PDF) on December 29, 2010. The project went ahead under the name green and the language was based on an old model of UCSD Pascal, which makes it possible to generate interpretive code. ^ \"A Conversation with James Gosling – ACM Queue\". Queue.acm.org. August 31, 2004. Archived from the original on July 16, 2015. Retrieved June 9, 2010. ^ In the summer of 1996, Sun was designing the precursor to what is now the event model of the AWT and the JavaBeans component architecture. Borland contributed greatly to this process. We looked very carefully at Delphi Object Pascal and built a working prototype of bound method references in order to understand their interaction with the Java programming language and its APIs.White Paper About Microsoft\'s Delegates ^ \"Chapel spec (Acknowledgements)\" (PDF). Cray Inc. October 1, 2015. Archived (PDF) from the original on February 5, 2016. Retrieved January 14, 2016. ^ \"Gambas Documentation Introduction\". Gambas Website. Archived from the original on October 9, 2017. Retrieved October 9, 2017. ^ \"Facebook Q&A: Hack brings static typing to PHP world\". InfoWorld. March 26, 2014. Archived from the original on February 13, 2015. Retrieved January 11, 2015. ^ \"Write once, run anywhere?\". Computer Weekly. May 2, 2002. Retrieved July 27, 2009. ^ a b c \"1.2 Design Goals of the Java™ Programming Language\". Oracle. January 1, 1999. Archived from the original on January 23, 2013. Retrieved January 14, 2013. ^ a b McMillan, Robert (August 1, 2013). \"Is Java Losing Its Mojo?\". wired.com. Archived from the original on February 15, 2017. Retrieved March 8, 2017. Java is on the wane, at least according to one outfit that keeps on eye on the ever-changing world of computer programming languages. For more than a decade, it has dominated the TIOBE Programming Community Index, and is back on top – a snapshot of software developer enthusiasm that looks at things like internet search results to measure how much buzz different languages have. But lately, Java has been slipping. ^ Chan, Rosalie (January 22, 2019). \"The 10 most popular programming languages, according to the \'Facebook for programmers\'\". Business Insider. Archived from the original on June 29, 2019. Retrieved June 29, 2019. ^ \"JavaOne 2013 Review: Java Takes on the Internet of Things\". www.oracle.com. Archived from the original on April 19, 2016. Retrieved June 19, 2016. ^ \"Why should I uninstall older versions of Java from my system?\". Oracle. Retrieved September 9, 2016. ^ Byous, Jon (c. 1998). \"Java technology: The early years\". Sun Developer Network. Sun Microsystems. Archived from the original on April 20, 2005. Retrieved April 22, 2005. ^ Object-oriented programming \"The History of Java Technology\". Sun Developer Network. c. 1995. Archived from the original on February 10, 2010. Retrieved April 30, 2010. ^ \"So why did they decide to call it Java? Archived November 15, 2013, at the Wayback Machine\", Kieron Murphy, JavaWorld.com, 10/04/96 ^ Kabutz, Heinz; Once Upon an Oak Archived April 13, 2007, at the Wayback Machine. Artima. Retrieved April 29, 2007. ^ \"JAVASOFT SHIPS JAVA 1.0\". Archived from the original on March 10, 2007. Retrieved May 13, 2018. ^ Object-oriented Programming with Java: Essentials and Applications. Tata McGraw-Hill Education. p. 34. ^ \"JSG – Java Study Group\". open-std.org. Archived from the original on August 25, 2006. Retrieved August 2, 2006. ^ \"Why Java™ Was – Not – Standardized Twice\" (PDF). Archived (PDF) from the original on January 13, 2014. Retrieved June 3, 2018. ^ \"What is ECMA—and why Microsoft cares\". Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ \"Java Community Process website\". Jcp.org. May 24, 2010. Archived from the original on August 8, 2006. Retrieved June 9, 2010. ^ \"JAVAONE: Sun – The bulk of Java is open sourced\". GrnLight.net. Archived from the original on May 27, 2014. Retrieved May 26, 2014. ^ \"Sun\'s Evolving Role as Java Evangelist\". O\'Reilly Media. Archived from the original on September 15, 2010. Retrieved August 2, 2009. ^ \"Oracle and Java\". oracle.com. Oracle Corporation. Archived from the original on January 31, 2010. Retrieved August 23, 2010. Oracle has been a leading and substantive supporter of Java since its emergence in 1995 and takes on the new role as steward of Java technology with a relentless commitment to fostering a community of participation and transparency.CS1 maint: BOT: original-url status unknown (link) ^ \"Learn About Java Technology\". Oracle. Archived from the original on November 24, 2011. Retrieved November 21, 2011. ^ Gosling, James (April 9, 2010). \"Time to move on...\" On a New Road. Archived from the original on November 5, 2010. Retrieved November 16, 2011.CS1 maint: BOT: original-url status unknown (link) ^ Topic, Dalibor. \"Moving to a Plugin-Free Web\". Archived from the original on March 16, 2016. Retrieved March 15, 2016. ^ \"JAVASOFT SHIPS JAVA 1.0\". Archived from the original on March 10, 2007. Retrieved February 5, 2008. ^ Chander, Sharat. \"Introducing Java SE 11\". oracle.com. Archived from the original on September 26, 2018. Retrieved September 26, 2018. ^ \"Java Card Overview\". Oracle Technology Network. Oracle. Archived from the original on January 7, 2015. Retrieved December 18, 2014. ^ \"Java Platform, Micro Edition (Java ME)\". Oracle Technology Network. Oracle. Archived from the original on January 4, 2015. Retrieved December 18, 2014. ^ \"Java SE\". Oracle Technology Network. Oracle. Archived from the original on December 24, 2014. Retrieved December 18, 2014. ^ \"Java Platform, Enterprise Edition (Java EE)\". Oracle Technology Network. Oracle. Archived from the original on December 17, 2014. Retrieved December 18, 2014. ^ \"Is the JVM (Java Virtual Machine) platform dependent or platform independent? What is the advantage of using the JVM, and having Java be a translated language?\". Programmer Interview. Archived from the original on January 19, 2015. Retrieved January 19, 2015. ^ Jelovic, Dejan. \"Why Java will always be slower than C++\". Archived from the original on February 11, 2008. Retrieved February 15, 2008. ^ Google. \"Loop Recognition in C++/Java/Go/Scala\" (PDF). Retrieved July 12, 2012. ^ \"Symantec\'s Just-In-Time Java Compiler To Be Integrated into Sun JDK 1.1\". Archived from the original on June 28, 2010. Retrieved August 1, 2009. ^ Salcic, Zoran; Park, Heejong; Teich, Jürgen; Malik, Avinash; Nadeem, Muhammad (July 22, 2017). \"Noc-HMP: A Heterogeneous Multicore Processor for Embedded Systems Designed in SystemJ\". ACM Transactions on Design Automation of Electronic Systems. 22 (4): 73. doi:10.1145/3073416. ISSN 1084-4309. ^ \"NullPointerException\". Oracle. Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ \"Exceptions in Java\". Artima.com. Archived from the original on January 21, 2009. Retrieved August 10, 2010. ^ \"Java HotSpot™ Virtual Machine Performance Enhancements\". Oracle.com. Archived from the original on May 29, 2017. Retrieved April 26, 2017. ^ \"Java HotSpot VM Options\". Oracle.com. September 7, 2010. Archived from the original on March 6, 2011. Retrieved June 30, 2012. ^ \"Garbage-First Collector\". docs.oracle.com. Archived from the original on March 9, 2016. Retrieved March 15, 2016. ^ \"Operator Overloading (C# vs Java)\". C# for Java Developers. Microsoft. Archived from the original on January 7, 2015. Retrieved December 10, 2014. ^ \"Multiple Inheritance of State, Implementation, and Type\". The Java™ Tutorials. Oracle. Archived from the original on November 9, 2014. Retrieved December 10, 2014. ^ \"Lesson: A Closer Look at the Hello World Application\". The Java™ Tutorials > Getting Started. Oracle Corporation. Archived from the original on March 17, 2011. Retrieved April 14, 2011. ^ \"Deprecated APIs, Features, and Options\". www.oracle.com. Retrieved May 31, 2019. ^ \"Java and Scala\'s Type Systems are Unsound\" (PDF). Archived (PDF) from the original on November 28, 2016. Retrieved February 20, 2017. ^ Arnold, Ken. \"Generics Considered Harmful\". java.net. Archived from the original on October 10, 2007. Retrieved September 10, 2015.CS1 maint: BOT: original-url status unknown (link) . More comments to the original article available at earlier archive snapshots like . ^ Jelovic, Dejan. \"Why Java Will Always Be Slower than C++\". www.jelovic.com. Archived from the original on February 11, 2008. Retrieved October 17, 2012. ^ Owens, Sean R. \"Java and unsigned int, unsigned short, unsigned byte, unsigned long, etc. (Or rather, the lack thereof)\". Archived from the original on February 20, 2009. Retrieved July 4, 2011. ^ Kahan, William. \"How Java\'s Floating-Point Hurts Everyone Everywhere\" (PDF). Electrical Engineering & Computer Science, University of California at Berkeley. Archived (PDF) from the original on September 5, 2012. Retrieved June 4, 2011. ^ \"Have you checked the Java?\". Archived from the original on September 21, 2012. Retrieved December 23, 2011. ^ Cadenhead, Rogers (November 20, 2017), Understanding How Java Programs Work, retrieved March 26, 2019 ^ Woolf, Nicky (May 26, 2016). \"Google wins six-year legal battle with Oracle over Android code copyright\". The Guardian. ISSN 0261-3077. Retrieved March 26, 2019. ^ \"Collections Framework Overview\". Java Documentation. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. ^ \"Java™ Security Overview\". Java Documentation. Oracle. Archived from the original on January 3, 2015. Retrieved December 18, 2014. ^ \"Trail: Internationalization\". The Java™ Tutorials. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. ^ \"How to Write Doc Comments for the Javadoc Tool\". Oracle Technology Network. Oracle. Archived from the original on December 18, 2014. Retrieved December 18, 2014. ^ Niccolai, James (January 23, 2001). \"Sun, Microsoft settle Java lawsuit\". JavaWorld. International Data Group. Archived from the original on May 28, 2008. Retrieved July 9, 2008. ^ van Gurp, Jilles (November 13, 2007). \"Google Android: Initial Impressions and Criticism\". Javalobby. Retrieved March 7, 2009. Frankly, I don\'t understand why Google intends to ignore the vast amount of existing implementation out there. It seems like a bad case of \"not invented here\" to me. Ultimately, this will slow adoption. There are already too many Java platforms for the mobile world and this is yet another one ^ Mullin, Joe. \"Google guilty of infringement in Oracle trial; future legal headaches loom\". Law & Disorder. Ars Technica. Archived from the original on May 8, 2012. Retrieved May 8, 2012. ^ Mullin, Joe (May 31, 2012). \"Google wins crucial API ruling, Oracle\'s case decimated\". Ars Technica. Archived from the original on March 12, 2017. Retrieved June 1, 2012. ^ Rosenblatt, Seth (May 9, 2014). \"Court sides with Oracle over Android in Java patent appeal\". CNET. Archived from the original on May 10, 2014. Retrieved May 10, 2014. ^ Mullin, Joe (May 26, 2016). \"Google beats Oracle—Android makes \"fair use\" of Java APIs\". Ars Technica. Archived from the original on January 20, 2017. Retrieved May 26, 2016. ^ Farivar, Cyrus (March 27, 2018). \"\"Google\'s use of the Java API packages was not fair,\" appeals court rules\". Ars Technica. Retrieved August 6, 2019. ^ Lee, Timothy (April 23, 2019). \"Google asks Supreme Court to overrule disastrous ruling on API copyrights\". Ars Technica. Retrieved April 23, 2019. References[edit] Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad; Buckley, Alex (2014). The Java® Language Specification (PDF) (Java SE 8 ed.). Gosling, James; Joy, Bill; Steele, Guy L., Jr.; Bracha, Gilad (2005). The Java Language Specification (3rd ed.). Addison-Wesley. ISBN 0-321-24678-0. Lindholm, Tim; Yellin, Frank (1999). The Java Virtual Machine Specification (2nd ed.). Addison-Wesley. ISBN 0-201-43294-3. External links[edit] Java (programming language)at Wikipedia\'s sister projects Definitions from Wiktionary Media from Wikimedia Commons News from Wikinews Quotations from Wikiquote Textbooks from Wikibooks Resources from Wikiversity Wikiversity has learning resources about Java Platform, Enterprise Edition/Java EE Tutorial v t e Java Platforms Java language JVM Micro Edition Standard Edition Enterprise Edition Java Card Android SDK Oracle technologies Squawk Java Development Kit OpenJDK Java virtual machine JavaFX Maxine VM Platform technologies Applets Servlets MIDlets JSP JSF Web Start (JNLP) Major third-party technologies Blackdown Eclipse GNU Classpath GWT Harmony Hibernate IcedTea Jazelle Spring Struts TopLink WildFly History Java version history Java Community Process Sun Microsystems Free Java implementations Major JVM languages BeanShell Clojure Groovy JRuby Jython Kotlin Processing Rhino Scala Community Conferences JavaOne Devoxx Organizations Apache Software Foundation Java Community Process Oracle Corporation Sun Microsystems, Sun Microsystems Laboratories People James Gosling Arthur van Hoff Urs Hölzle Patrick Naughton Category   Computer programming portal v t e Sun Microsystems (acquired by Oracle Corp, 2010) Hardware Sun-1 Sun-2 Sun-3 Sun386i Sun-4 SPARCstation Netra Ultra Enterprise Sun Blade Sun Fire SPARC Enterprise SPARC JavaStation Sun Ray Sun Modular Datacenter more... Software SunOS Solaris NIS (+) NFS ZFS SunView NeWS OpenWindows Java Desktop System Sun Studio Java StarOffice iPlanet, Sun ONE, Java Enterprise System Sun Secure Global Desktop MySQL Sun xVM GlassFish VirtualBox more... Storage StorageTek Sun Open Storage QFS ZFS High-performance computing Sun Cloud Sun Constellation System Sun Visualization System Sun Grid Engine Lustre Research Sun Labs picoJava Fortress Project Looking Glass Education SCPs BlueJ Community Common Development and Distribution License Java Community Process NetBeans OpenOffice.org OpenSolaris OpenSPARC OpenJDK OSUM People Bill Joy Andy Bechtolsheim Scott McNealy Vinod Khosla List of notable employees v t e Oracle Corporation Corporate directors Jeffrey Berg H. Raymond Bingham Michael Boskin Safra Catz Larry Ellison Héctor García-Molina Joseph Grundfest Jeffrey O. Henley Mark Hurd Jack F. Kemp Donald L. Lucas Naomi O. Seligman Acquisitions (list) Sun PeopleSoft Hyperion Siebel BEA JD Edwards RightNow Virtual Iron TimesTen Sunopsis NetSuite Databases Oracle Database MySQL InnoDB Berkeley DB TimesTen Rdb Essbase Programming languages Java PL/SQL IDEs JDeveloper Forms NetBeans Apex SQL Developer Developer Studio Middleware Fusion Middleware WebCenter SOA Suite WebLogic Server Coherence Tuxedo GlassFish Operating systems Oracle Linux Oracle Solaris Computer hardware Sun Fire SPARC (T-Series, Enterprise) StorageTek Computer appliances Oracle Exadata Oracle Exalogic Big Data Appliance Education and recognition Oracle Certification Program Category v t e Programming languages Comparison Timeline History APL Assembly BASIC C C++ C# COBOL Elixir Fortran Go Groovy Haskell Java JavaScript (JS) Julia Kotlin Lisp Lua MATLAB Objective-C OCaml Pascal Perl PHP Python R Ruby Rust Scala Shell Smalltalk Swift TypeScript Visual Basic .NET (VB.NET) more... Category Lists Alphabetical Categorical Generational Non-English-based v t e Free and open-source software General Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Software packages Audio Bioinformatics Codecs Collaboration Configuration management Device drivers Graphics Wireless Geophysics Health Mathematics Operating systems Programming languages Routing Statistics Television Video games Web applications Content management systems E-commerce Word processors Android apps iOS apps Commercial Trademarked Formerly proprietary Community Free software movement History Open-source-software movement Organizations Events Licenses AFL Apache APSL Artistic Beerware Boost BSD CC0 CDDL EPL Free Software Foundation GNU GPL GNU LGPL ISC MIT MPL Ms-PL/RL Python Python Software Foundation License Sleepycat Unlicense WTFPL zlib Types and standards Comparison of free and open-source software licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Viral license Challenges Digital rights management Firmware security Hardware restrictions License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Secure boot Software patents Software security Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Free and open-source software portal Category Commons WikiProject Book Authority control BNE: XX540033 BNF: cb12533207m (data) GND: 4401313-9 LCCN: sh95008574 Retrieved from \"https://en.wikipedia.org/w/index.php?title=Java_(programming_language)&oldid=924531367\" Categories: C programming language family Class-based programming languages Computer-related introductions in 1995 Concurrent programming languages Java (programming language) Java platform Java specification requests JVM programming languages Object-oriented programming languages Programming languages created in 1995 Programming languages Statically typed programming languages Sun Microsystems Hidden categories: Webarchive template wayback links CS1 maint: BOT: original-url status unknown Use mdy dates from August 2017 Articles with short description Pages using deprecated image syntax Articles containing potentially dated statements from 2019 All articles containing potentially dated statements Articles containing potentially dated statements from March 2019 Articles with obsolete information from July 2019 All Wikipedia articles in need of updating Wikipedia articles that may have off-topic paragraphs Articles with example Java code Articles needing additional references from May 2019 All articles needing additional references Articles with specifically marked weasel-worded phrases from September 2015 Wikipedia articles with BNE identifiers Wikipedia articles with BNF identifiers Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page In other projects Wikimedia Commons Wikibooks Wikiquote Wikiversity Print/export Create a book Download as PDF Printable version Languages Acèh Afrikaans ???? ??????? Aragonés ??????? Asturianu Az?rbaycanca ?????? ????? Bân-lâm-gú ?????????? ?????????? (???????????)? ????????? Bosanski Català ??????? ?eština Corsu Cymraeg Dansk Deutsch Eesti ???????? Español Esperanto Estremeñu Euskara ????? Français Gaeilge Galego ??????? ???/Hak-kâ-ngî ??? ??????? ?????? Hrvatski Bahasa Indonesia Interlingua Íslenska Italiano ????? ????? ??????? ??????? Kreyòl ayisyen ???????? Latina Latviešu Lietuvi? Ligure Lumbaart Magyar ?????????? ?????? ????? Bahasa Melayu Minangkabau Mìng-d??ng-ng?? ?????? ?????????? Nederlands ?????? ??? Norsk Norsk nynorsk Occitan ????? O?zbekcha/??????? ?????? Polski Português Qaraqalpaqsha Român? ??????? ???? ???? Scots Shqip ????? Simple English ???? Sloven?ina Slovenš?ina Soomaaliga ????? ?????? / srpski Srpskohrvatski / ?????????????? Suomi Svenska Tagalog ????? Taqbaylit ???????/tatarça ?????? ??? ?????? Türkçe ?? ???? ?????????? Vèneto Ti?ng Vi?t ?? Winaray ?? ?? Žemait?ška ?? Edit links This page was last edited on 4 November 2019, at 12:27 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view','Java (programming language) - Wikipedia'),(5,'www.java.com/','2019','November','Early November','2/11/2019','Office','sajid24x7@gmail.com',70,'Java.com Download Help Java+You, Download Today! Java Download » What is Java? » Do I have Java? » Need Help? » Uninstall About Java Select Language | About Java | Support | Developers | Feedback Privacy |   | Terms of Use | Trademarks | Disclaimer Oracle','Java | Oracle'),(6,'en.wikipedia.org/wiki/Java_(programming_language)','2019','November','Early November','2/11/2019','Office','sajid24x7@gmail.com',500,'Java (programming language) From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article is about a programming language. For the software platform, see Java (software platform). For the software package downloaded from java.com, see Java Platform, Standard Edition. For other uses, see Java (disambiguation). Not to be confused with JavaScript. Object-oriented programming language Java Paradigm Multi-paradigm: generic, object-oriented (class-based), imperative, reflective Designed by James Gosling Developer Sun Microsystems First appeared May 23, 1995; 24 years ago (1995-05-23)[1] Stable release Java SE 13 / September 17, 2019; 48 days ago (2019-09-17) Typing discipline Static, strong, safe, nominative, manifest Filename extensions .java, .class, .jar Website oracle.com/java/ Major implementations Compilers: OpenJDK (javac, sjavac), GNU Compiler for Java (GCJ), Eclipse Compiler for Java (ECJ) Virtual machines: OpenJDK JRE, Oracle JRockit, Azul Zing, IBM J9, Excelsior JET, Gluon VM, Microsoft JVM, Apache Harmony JIT compilers: HotSpot, GraalVM, Azul Falcon (LLVM) Influenced by Ada 83, C++,[2] C#,[3] Eiffel,[4] Mesa,[5] Modula-3,[6] Oberon,[7] Objective-C,[8] UCSD Pascal,[9][10] Object Pascal[11] Influenced Ada 2005, BeanShell, C#, Chapel,[12] Clojure, ECMAScript, Fantom, Gambas,[13] Groovy, Hack,[14] Haxe, J#, Kotlin, PHP, Python, Scala, Seed7, Vala Java Programming at Wikibooks Java is a general-purpose programming language that is class-based, object-oriented, and designed to have as few implementation dependencies as possible. It is intended to let application developers write once, run anywhere (WORA),[15] meaning that compiled Java code can run on all platforms that support Java without the need for recompilation.[16] Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of the underlying computer architecture. The syntax of Java is similar to C and C++, but it has fewer low-level facilities than either of them. As of 2019[update], Java was one of the most popular programming languages in use according to GitHub,[17][18] particularly for client-server web applications, with a reported 9 million developers.[19] Java was originally developed by James Gosling at Sun Microsystems (which has since been acquired by Oracle) and released in 1995 as a core component of Sun Microsystems\' Java platform. The original and reference implementation Java compilers, virtual machines, and class libraries were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the Java Community Process, Sun had relicensed most of its Java technologies under the GNU General Public License. Meanwhile, others have developed alternative implementations of these Sun technologies, such as the GNU Compiler for Java (bytecode compiler), GNU Classpath (standard libraries), and IcedTea-Web (browser plugin for applets). The latest versions are Java 13, released in September 2019, and Java 11, a currently supported long-term support (LTS) version, released on September 25, 2018; Oracle released for the legacy Java 8 LTS the last free public update in January 2019 for commercial use, while it will otherwise still support Java 8 with public updates for personal use up to at least December 2020. Oracle (and others) highly recommend uninstalling older versions of Java because of serious risks due to unresolved security issues.[20] Since Java 9 (and 10 and 12) is no longer supported, Oracle advises its users to immediately transition to Java 11 (Java 13 is also a non-LTS option). Contents 1 History 1.1 Principles 1.2 Versions 2 Editions 3 Execution system 3.1 Java JVM and Bytecode 3.1.1 Performance 3.2 Non-JVM 3.3 Automatic memory management 4 Syntax 4.1 Hello world example 4.2 Example with methods 5 Special classes 5.1 Applet 5.2 Servlet 5.3 JavaServer Pages 5.4 Swing application 5.5 JavaFX application 5.6 Generics 6 Criticism 7 Class libraries 8 Documentation 9 Implementations 10 Use outside the Java platform 10.1 Android 10.1.1 Controversy 11 See also 11.1 Comparison of Java with other languages 12 Notes 13 References 14 External links History[edit] See also: Java (software platform) § History Duke, the Java mascot James Gosling, the creator of Java, in 2008 The TIOBE programming language popularity index graph from 2002 to 2018. Java is steadily on the top since mid-2015. James Gosling, Mike Sheridan, and Patrick Naughton initiated the Java language project in June 1991.[21] Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time.[22] The language was initially called Oak after an oak tree that stood outside Gosling\'s office. Later the project went by the name Green and was finally renamed Java, from Java coffee.[23] Gosling designed Java with a C/C++-style syntax that system and application programmers would find familiar.[24] Sun Microsystems released the first public implementation as Java 1.0 in 1996.[25] It promised Write Once, Run Anywhere (WORA), providing no-cost run-times on popular platforms. Fairly secure and featuring configurable security, it allowed network- and file-access restrictions. Major web browsers soon incorporated the ability to run Java applets within web pages, and Java quickly became popular. The Java 1.0 compiler was re-written in Java by Arthur van Hoff to comply strictly with the Java 1.0 language specification.[26] With the advent of Java 2 (released initially as J2SE 1.2 in December 1998 – 1999), new versions had multiple configurations built for different types of platforms. J2EE included technologies and APIs for enterprise applications typically run in server environments, while J2ME featured APIs optimized for mobile applications. The desktop version was renamed J2SE. In 2006, for marketing purposes, Sun renamed new J2 versions as Java EE, Java ME, and Java SE, respectively. In 1997, Sun Microsystems approached the ISO/IEC JTC 1 standards body and later the Ecma International to formalize Java, but it soon withdrew from the process.[27][28][29] Java remains a de facto standard, controlled through the Java Community Process.[30] At one time, Sun made most of its Java implementations available without charge, despite their proprietary software status. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System. On November 13, 2006, Sun released much of its Java virtual machine (JVM) as free and open-source software (FOSS), under the terms of the GNU General Public License (GPL). On May 8, 2007, Sun finished the process, making all of its JVM\'s core code available under free software/open-source distribution terms, aside from a small portion of code to which Sun did not hold the copyright.[31] Sun\'s vice-president Rich Green said that Sun\'s ideal role with regard to Java was as an evangelist.[32] Following Oracle Corporation\'s acquisition of Sun Micro-systems in 2009–10, Oracle has described itself as the steward of Java technology with a relentless commitment to fostering a community of participation and transparency.[33] This did not prevent Oracle from filing a lawsuit against Google shortly after that for using Java inside the Android SDK (see the Android section). Java software runs on everything from laptops to data centers, game consoles to scientific supercomputers.[34] On April 2, 2010, James Gosling resigned from Oracle.[35] In January 2016, Oracle announced that Java run-time environments based on JDK 9 will discontinue the browser plugin.[36] Principles[edit] There were five primary goals in the creation of the Java language:[16] It must be simple, object-oriented, and familiar. It must be robust and secure. It must be architecture-neutral and portable. It must execute with high performance. It must be interpreted, threaded, and dynamic. Versions[edit] Main article: Java version history As of March 2019[update], Java 8 is supported; and both Java 8 and 11 as Long Term Support (LTS) versions. Major release versions of Java, along with their release dates: JDK 1.0 (January 23, 1996)[37] JDK 1.1 (February 19, 1996) J2SE 1.2 (December 8, 1998) J2SE 1.3 (May 8, 2000) J2SE 1.4 (February 6, 2002) J2SE 5.0 (September 30, 2004) Java SE 6 (December 11, 2006) Java SE 7 (July 28, 2011) Java SE 8 (March 18, 2014) Java SE 9 (September 21, 2017) Java SE 10 (March 20, 2018) Java SE 11 (September , 2018)[38] Java SE 12 (March 19, 2019) Java SE 13 (September 17, 2019) Editions[edit] This article\'s factual accuracy may be compromised due to out-of-date information. Please update this article to reflect recent events or newly available information. (July 2019) See also: Free Java implementations § Class library Java platform editions Java Card Micro Edition (ME) Standard Edition (SE) Enterprise Edition (EE) JavaFX (bundled in JRE from 8 to 10 but separately for JavaFX 1.x, 2.x and 11) PersonalJava (Discontinued) v t e Sun has defined and supports four editions of Java targeting different application environments and segmented many of its APIs so that they belong to one of the platforms. The platforms are: Java Card for smart-cards.[39] Java Platform, Micro Edition (Java ME) – targeting environments with limited resources.[40] Java Platform, Standard Edition (Java SE) – targeting workstation environments.[41] Java Platform, Enterprise Edition (Java EE) – targeting large distributed enterprise or Internet environments.[42] The classes in the Java APIs are organized into separate groups called packages. Each package contains a set of related interfaces, classes, and exceptions. Refer to the separate platforms for a description of the packages available.[relevant to this section? – discuss] Sun also provided an edition called Personal Java that has been superseded by later, standards-based Java ME configuration-profile pairings. Execution system[edit] Java JVM and Bytecode[edit] Main articles: Java (software platform) and Java virtual machine One design goal of Java is portability, which means that programs written for the Java platform must run similarly on any combination of hardware and operating system with adequate run time support. This is achieved by compiling the Java language code to an intermediate representation called Java bytecode, instead of directly to architecture-specific machine code. Java bytecode instructions are analogous to machine code, but they are intended to be executed by a virtual machine (VM) written specifically for the host hardware. End users commonly use a Java Runtime Environment (JRE) installed on their own machine for standalone Java applications, or in a web browser for Java applets. Standard libraries provide a generic way to access host-specific features such as graphics, threading, and networking. The use of universal bytecode makes porting simple. However, the overhead of interpreting bytecode into machine instructions made interpreted programs almost always run more slowly than native executables. Just-in-time (JIT) compilers that compile byte-codes to machine code during runtime were introduced from an early stage. Java itself is platform-independent and is adapted to the particular platform it is to run on by a Java virtual machine for it, which translates the Java bytecode into the platform\'s machine language.[43] Performance[edit] Main article: Java performance Programs written in Java have a reputation for being slower and requiring more memory than those written in C++.[44][45] However, Java programs\' execution speed improved significantly with the introduction of just-in-time compilation in 1997/1998 for Java 1.1,[46] the addition of language features supporting better code analysis (such as inner classes, the StringBuilder class, optional assertions, etc.), and optimizations in the Java virtual machine, such as HotSpot becoming the default for Sun\'s JVM in 2000. With Java 1.5, the performance was improved with the addition of the java.util.concurrent package, including lock free implementations of the ConcurrentMaps and other multi-core collections, and it was improved further with Java 1.6. Non-JVM[edit] Some platforms offer direct hardware support for Java; there are micro controllers that can run Java bytecode in hardware instead of a software Java virtual machine,[47] and some ARM-based processors could have hardware support for executing Java bytecode through their Jazelle option, though support has mostly been dropped in current implementations of ARM. Automatic memory management[edit] Java uses an automatic garbage collector to manage memory in the object lifecycle. The programmer determines when objects are created, and the Java runtime is responsible for recovering the memory once objects are no longer in use. Once no references to an object remain, the unreachable memory becomes eligible to be freed automatically by the garbage collector. Something similar to a memory leak may still occur if a programmer\'s code holds a reference to an object that is no longer needed, typically when objects that are no longer needed are stored in containers that are still in use. If methods for a non-existent object are called, a null pointer exception is thrown.[48][49] One of the ideas behind Java\'s automatic memory management model is that programmers can be spared the burden of having to perform manual memory management. In some languages, memory for the creation of objects is implicitly allocated on the stack or explicitly allocated and deallocated from the heap. In the latter case, the responsibility of managing memory resides with the programmer. If the program does not deallocate an object, a memory leak occurs. If the program attempts to access or deallocate memory that has already been deallocated, the result is undefined and difficult to predict, and the program is likely to become unstable or crash. This can be partially remedied by the use of smart pointers, but these add overhead and complexity. Note that garbage collection does not prevent logical memory leaks, i.e. those where the memory is still referenced but never used. Garbage collection may happen at any time. Ideally, it will occur when a program is idle. It is guaranteed to be triggered if there is insufficient free memory on the heap to allocate a new object; this can cause a program to stall momentarily. Explicit memory management is not possible in Java. Java does not support C/C++ style pointer arithmetic, where object addresses can be arithmetically manipulated (e.g. by adding or subtracting an offset). This allows the garbage collector to relocate referenced objects and ensures type safety and security. As in C++ and some other object-oriented languages, variables of Java\'s primitive data types are either stored directly in fields (for objects) or on the stack (for methods) rather than on the heap, as is commonly true for non-primitive data types (but see escape analysis). This was a conscious decision by Java\'s designers for performance reasons. Java contains multiple types of garbage collectors. By default, HotSpot uses the parallel scavenge garbage collector.[50] However, there are also several other garbage collectors that can be used to manage the heap. For 90% of applications in Java, the Concurrent Mark-Sweep (CMS) garbage collector is sufficient.[51] Oracle aims to replace CMS with the Garbage-First Collector (G1).[52] Having solved the memory management problem does not relieve the programmer of the burden of handling properly other kind of resources, like network or database connections, file handles, etc., especially in the presence of exceptions. Paradoxically, the presence of a garbage collector has faded the necessity of having an explicit destructor method in the classes, thus rendering the management of these other resources more difficult. Syntax[edit] Main article: Java syntax Dependency graph of the Java Core classes (created with jdeps and Gephi) The syntax of Java is largely influenced by C++. Unlike C++, which combines the syntax for structured, generic, and object-oriented programming, Java was built almost exclusively as an object-oriented language.[16] All code is written inside classes, and every data item is an object, with the exception of the primitive data types, (i.e. integers, floating-point numbers, boolean values, and characters), which are not objects for performance reasons. Java reuses some popular aspects of C++ (such as the printf method). Unlike C++, Java does not support operator overloading[53] or multiple inheritance for classes, though multiple inheritance is supported for interfaces.[54] Java uses comments similar to those of C++. There are three different styles of comments: a single line style marked with two slashes (//), a multiple line style opened with /* and closed with */, and the Javadoc commenting style opened with /** and closed with */. The Javadoc style of commenting allows the user to run the Javadoc executable to create documentation for the program and can be read by some integrated development environments (IDEs) such as Eclipse to allow developers to access documentation within the IDE. Hello world example[edit] The traditional Hello world program can be written in Java as:[55] public class HelloWorldApp {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\"); // Prints the string to the console.\n    }\n}\n Source files must be named after the public class they contain, appending the suffix .java, for example, HelloWorldApp.java. It must first be compiled into bytecode, using a Java compiler, producing a file named HelloWorldApp.class. Only then can it be executed, or launched. The Java source file may only contain one public class, but it can contain multiple classes with a non-public access modifier and any number of public inner classes. When the source file contains multiple classes, it is necessary to make one class (introduced by the class keyword) public (preceded by the public keyword) and name the source file with that public class name. A class that is not declared public may be stored in any .java file. The compiler will generate a class file for each class defined in the source file. The name of the class file is the name of the class, with .class appended. For class file generation, anonymous classes are treated as if their name were the concatenation of the name of their enclosing class, a $, and an integer. The keyword public denotes that a method can be called from code in other classes, or that a class may be used by classes outside the class hierarchy. The class hierarchy is related to the name of the directory in which the .java file is located. This is called an access level modifier. Other access level modifiers include the keywords private and protected. The keyword static[17] in front of a method indicates a static method, which is associated only with the class and not with any specific instance of that class. Only static methods can be invoked without a reference to an object. Static methods cannot access any class members that are not also static. Methods that are not designated static are instance methods and require a specific instance of a class to operate. The keyword void indicates that the main method does not return any value to the caller. If a Java program is to exit with an error code, it must call System.exit() explicitly. The method name main is not a keyword in the Java language. It is simply the name of the method the Java launcher calls to pass control to the program. Java classes that run in managed environments such as applets and Enterprise JavaBeans do not use or need a main() method. A Java program may contain multiple classes that have main methods, which means that the VM needs to be explicitly told which class to launch from. The main method must accept an array of String objects. By convention, it is referenced as args although any other legal identifier name can be used. Since Java 5, the main method can also use variable arguments, in the form of public static void main(String... args), allowing the main method to be invoked with an arbitrary number of String arguments. The effect of this alternate declaration is semantically identical (to the args parameter which is still an array of String objects), but it allows an alternative syntax for creating and passing the array. The Java launcher launches Java by loading a given class (specified on the command line or as an attribute in a JAR) and starting its public static void main(String[]) method. Stand-alone programs must declare this method explicitly. The String[] args parameter is an array of String objects containing any arguments passed to the class. The parameters to main are often passed by means of a command line. Printing is part of a Java standard library: The System class defines a public static field called out. The out object is an instance of the PrintStream class and provides many methods for printing data to standard out, including println(String) which also appends a new line to the passed string. The string \"Hello World!\" is automatically converted to a String object by the compiler. Example with methods[edit] // This is an example of a single line comment using two slashes\n\n/* This is an example of a multiple line comment using the slash and asterisk.\n This type of comment can be used to hold a lot of information or deactivate\n code, but it is very important to remember to close the comment. */\n\npackage fibsandlies;\nimport java.util.HashMap;\n\n/**\n * This is an example of a Javadoc comment; Javadoc can compile documentation\n * from this text. Javadoc comments must immediately precede the class, method, or field being documented.\n */\npublic class FibCalculator extends Fibonacci implements Calculator {\n\n    private static Map<Integer, Integer> memoized = new HashMap<Integer, Integer>();\n\n    /*\n     * The main method written as follows is used by the JVM as a starting point for the program.\n     */\n    public static void main(String[] args) {\n        memoized.put(1, 1);\n        memoized.put(2, 1);\n        System.out.println(fibonacci(12)); //Get the 12th Fibonacci number and print to console\n    }\n\n    /**\n     * An example of a method written in Java, wrapped in a class.\n     * Given a non-negative number FIBINDEX, returns\n     * the Nth Fibonacci number, where N equals FIBINDEX.\n     * @param fibIndex The index of the Fibonacci number\n     * @return The Fibonacci number\n     */\n    public static int fibonacci(int fibIndex) {\n        if (memoized.containsKey(fibIndex)) {\n            return memoized.get(fibIndex);\n        } else {\n            int answer = fibonacci(fibIndex - 1) + fibonacci(fibIndex - 2);\n            memoized.put(fibIndex, answer);\n            return answer;\n        }\n    }\n}\n Special classes[edit] This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. Find sources: \"Java\" programming language – news · newspapers · books · scholar · JSTOR (May 2019) (Learn how and when to remove this template message) Applet[edit] Main article: Java applet Java applets were programs that were embedded in other applications, typically in a Web page displayed in a web browser. The Java applet API is now deprecated since Java 9 in 2017.[56] Servlet[edit] Main article: Java servlet Java servlet technology provides Web developers with a simple, consistent mechanism for extending the functionality of a Web server and for accessing existing business systems. Servlets are server-side Java EE components that generate responses (typically HTML pages) to requests (typically HTTP requests) from clients. The Java servlet API has to some extent been superseded by two standard Java technologies for web services: the Java API for RESTful Web Services (JAX-RS 2.0) useful for AJAX, JSON and REST services, and the Java API for XML Web Services (JAX-WS) useful for SOAP Web Services. JavaServer Pages[edit] Main article: JavaServer Pages JavaServer Pages (JSP) are server-side Java EE components that generate responses, typically HTML pages, to HTTP requests from clients. JSPs embed Java code in an HTML page by using the special delimiters <% and %>. A JSP is compiled to a Java servlet, a Java application in its own right, the first time it is accessed. After that, the generated servlet creates the response. Swing application[edit] Main article: Swing (Java) Swing is a graphical user interface library for the Java SE platform. It is possible to specify a different look and feel through the pluggable look and feel system of Swing. Clones of Windows, GTK+, and Motif are supplied by Sun. Apple also provides an Aqua look and feel for macOS. Where prior implementations of these looks and feels may have been considered lacking, Swing in Java SE 6 addresses this problem by using more native GUI widget drawing routines of the underlying platforms. JavaFX application[edit] Main article: JavaFX JavaFX is a software platform for creating and delivering desktop applications, as well as rich Internet applications (RIAs) that can run across a wide variety of devices. JavaFX is intended to replace Swing as the standard GUI library for Java SE, but both will be included for the foreseeable future. JavaFX has support for desktop computers and web browsers on Microsoft Windows, Linux, and macOS. JavaFX does not have support for native OS look and feels. Generics[edit] Main article: Generics in Java In 2004, generics were added to the Java language, as part of J2SE 5.0. Prior to the introduction of generics, each variable declaration had to be of a specific type. For container classes, for example, this is a problem because there is no easy way to create a container that accepts only specific types of objects. Either the container operates on all subtypes of a class or interface, usually Object, or a different container class has to be created for each contained class. Generics allow compile-time type checking without having to create many container classes, each containing almost identical code. In addition to enabling more efficient code, certain runtime exceptions are prevented from occurring, by issuing compile-time errors. If Java prevented all runtime type errors (ClassCastException\'s) from occurring, it would be type safe. In 2016, the type system of Java was proven unsound.[57] Criticism[edit] Main article: Criticism of Java Criticisms directed at Java include the implementation of generics,[58] speed,[59] the handling of unsigned numbers,[60] the implementation of floating-point arithmetic,[61] and a history of security vulnerabilities in the primary Java VM implementation HotSpot.[62] Class libraries[edit] Main article: Java Class Library The Java Class Library is the standard library, developed to support application development in Java. It is controlled by Sun Microsystems in cooperation with others through the Java Community Process program.[63] Companies or individuals participating in this process can influence the design and development of the APIs. This process has been a subject of controversy during the 2010s.[64] The class library contains features such as: The core libraries, which include: IO/NIO Networking Reflection Concurrency Generics Scripting/Compiler Functional programming (Lambda, Streaming) Collection libraries that implement data structures such as lists, dictionaries, trees, sets, queues and double-ended queue, or stacks[65] XML Processing (Parsing, Transforming, Validating) libraries Security[66] Internationalization and localization libraries[67] The integration libraries, which allow the application writer to communicate with external systems. These libraries include: The Java Database Connectivity (JDBC) API for database access Java Naming and Directory Interface (JNDI) for lookup and discovery RMI and CORBA for distributed application development JMX for managing and monitoring applications User interface libraries, which include: The (heavyweight, or native) Abstract Window Toolkit (AWT), which provides GUI components, the means for laying out those components and the means for handling events from those components The (lightweight) Swing libraries, which are built on AWT but provide (non-native) implementations of the AWT widgetry APIs for audio capture, processing, and playback JavaFX A platform dependent implementation of the Java virtual machine that is the means by which the bytecodes of the Java libraries and third party applications are executed Plugins, which enable applets to be run in web browsers Java Web Start, which allows Java applications to be efficiently distributed to end users across the Internet Licensing and documentation Documentation[edit] Main article: Javadoc Javadoc is a comprehensive documentation system, created by Sun Microsystems, used by many Java developers[by whom?]. It provides developers with an organized system for documenting their code. Javadoc comments have an extra asterisk at the beginning, i.e. the delimiters are /** and */, whereas the normal multi-line comments in Java are set off with the delimiters /* and */.[68] Implementations[edit] See also: Free Java implementations Oracle Corporation is the current owner of the official implementation of the Java SE platform, following their acquisition of Sun Microsystems on January 27, 2010. This implementation is based on the original implementation of Java by Sun. The Oracle implementation is available for Microsoft Windows (still works for XP, while only later versions are currently officially supported), macOS, Linux, and Solaris. Because Java lacks any formal standardization recognized by Ecma International, ISO/IEC, ANSI, or other third-party standards organization, the Oracle implementation is the de facto standard. The Oracle implementation is packaged into two different distributions: The Java Runtime Environment (JRE) which contains the parts of the Java SE platform required to run Java programs and is intended for end users, and the Java Development Kit (JDK), which is intended for software developers and includes development tools such as the Java compiler, Javadoc, Jar, and a debugger. Oracle has also released GraalVM, a high performance Java dynamic compiler and interpreter. OpenJDK is another notable Java SE implementation that is licensed under the GNU GPL. The implementation started when Sun began releasing the Java source code under the GPL. As of Java SE 7, OpenJDK is the official Java reference implementation. The goal of Java is to make all implementations of Java compatible. Historically, Sun\'s trademark license for usage of the Java brand insists that all implementations be compatible. This resulted in a legal dispute with Microsoft after Sun claimed that the Microsoft implementation did not support RMI or JNI and had added platform-specific features of their own. Sun sued in 1997, and, in 2001, won a settlement of US$20 million, as well as a court order enforcing the terms of the license from Sun.[69] As a result, Microsoft no longer ships Java with Windows. Platform-independent Java is essential to Java EE, and an even more rigorous validation is required to certify an implementation. This environment enables portable server-side applications. Use outside the Java platform[edit] The Java programming language requires the presence of a software platform in order for compiled programs to be executed. Oracle supplies the Java platform for use with Java. The Android SDK is an alternative software platform, used primarily for developing Android applications with its own GUI system. Android[edit] The Android operating system makes extensive use of Java-related technology The Java language is a key pillar in Android, an open source mobile operating system. Although Android, built on the Linux kernel, is written largely in C, the Android SDK uses the Java language as the basis for Android applications but does not use any of its standard GUI, SE, ME or other established Java standards[70]. The bytecode language supported by the Android SDK is incompatible with Java bytecode and runs on its own virtual machine, optimized for low-memory devices such as smartphones and tablet computers. Depending on the Android version, the bytecode is either interpreted by the Dalvik virtual machine or compiled into native code by the Android Runtime. Android does not provide the full Java SE standard library, although the Android SDK does include an independent implementation of a large subset of it. It supports Java 6 and some Java 7 features, offering an implementation compatible with the standard library (Apache Harmony). Controversy[edit] See also: Oracle America, Inc. v. Google, Inc. The use of Java-related technology in Android led to a legal dispute between Oracle and Google. On May 7, 2012, a San Francisco jury found that if APIs could be copyrighted, then Google had infringed Oracle\'s copyrights by the use of Java in Android devices.[71] District Judge William Haskell Alsup ruled on May 31, 2012, that APIs cannot be copyrighted,[72] but this was reversed by the United States Court of Appeals for the Federal Circuit in May 2014.[73] On May 26, 2016, the district court decided in favor of Google, ruling the copyright infringement of the Java API in Android constitutes fair use.[74] On March 2018, this ruling was overturned by the Appeals Court, which sent down the case of determining the damages to federal court in San Francisco.[75] Google filed a petition for writ of certiorari with the Supreme Court of the United States in January 2019 to challenge the two rulings that were made by the Appeals Court towards Oracle\'s favor.[76] See also[edit] Computer programming portal Book: Programming for Students C# C++ Dalvik, used in old Android versions, replaced by non-JIT Android Runtime Deterministic Parallel Java List of Java virtual machines List of Java APIs List of JVM languages Comparison of Java with other languages[edit] Comparison of C# and Java Comparison of Java and C++ Notes[edit] ^ Binstock, Andrew (May 20, 2015). \"Java\'s 20 Years of Innovation\". Forbes. Archived from the original on March 14, 2016. Retrieved March 18, 2016. ^ Chaudhary, Harry H. (July 28, 2014). \"Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans\". Retrieved May 29, 2016. ^ Java 5.0 added several new language features (the enhanced for loop, autoboxing, varargs and annotations), after they were introduced in the similar (and competing) C# language. [1] Archived March 19, 2011, at the Wayback Machine [2] Archived January 7, 2006, at the Wayback Machine ^ Gosling, James; McGilton, Henry (May 1996). \"The Java Language Environment\". Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad. \"The Java Language Specification, 2nd Edition\". Archived from the original on August 5, 2011. Retrieved February 8, 2008. ^ \"The A-Z of Programming Languages: Modula-3\". Computerworld.com.au. Archived from the original on January 5, 2009. Retrieved June 9, 2010. ^ Niklaus Wirth stated on a number of public occasions, e.g. in a lecture at the Polytechnic Museum, Moscow in September 2005 (several independent first-hand accounts in Russian exist, e.g. one with an audio recording: Filippova, Elena (September 22, 2005). \"Niklaus Wirth\'s lecture at the Polytechnic Museum in Moscow\". ), that the Sun Java design team licensed the Oberon compiler sources a number of years prior to the release of Java and examined it: a (relative) compactness, type safety, garbage collection, no multiple inheritance for classes – all these key overall design features are shared by Java and Oberon. ^ Patrick Naughton cites Objective-C as a strong influence on the design of the Java programming language, stating that notable direct derivatives include Java interfaces (derived from Objective-C\'s protocol) and primitive wrapper classes. [3] Archived July 13, 2011, at the Wayback Machine ^ TechMetrix Research (1999). \"History of Java\" (PDF). Java Application Servers Report. Archived from the original (PDF) on December 29, 2010. The project went ahead under the name green and the language was based on an old model of UCSD Pascal, which makes it possible to generate interpretive code. ^ \"A Conversation with James Gosling – ACM Queue\". Queue.acm.org. August 31, 2004. Archived from the original on July 16, 2015. Retrieved June 9, 2010. ^ In the summer of 1996, Sun was designing the precursor to what is now the event model of the AWT and the JavaBeans component architecture. Borland contributed greatly to this process. We looked very carefully at Delphi Object Pascal and built a working prototype of bound method references in order to understand their interaction with the Java programming language and its APIs.White Paper About Microsoft\'s Delegates ^ \"Chapel spec (Acknowledgements)\" (PDF). Cray Inc. October 1, 2015. Archived (PDF) from the original on February 5, 2016. Retrieved January 14, 2016. ^ \"Gambas Documentation Introduction\". Gambas Website. Archived from the original on October 9, 2017. Retrieved October 9, 2017. ^ \"Facebook Q&A: Hack brings static typing to PHP world\". InfoWorld. March 26, 2014. Archived from the original on February 13, 2015. Retrieved January 11, 2015. ^ \"Write once, run anywhere?\". Computer Weekly. May 2, 2002. Retrieved July 27, 2009. ^ a b c \"1.2 Design Goals of the Java™ Programming Language\". Oracle. January 1, 1999. Archived from the original on January 23, 2013. Retrieved January 14, 2013. ^ a b McMillan, Robert (August 1, 2013). \"Is Java Losing Its Mojo?\". wired.com. Archived from the original on February 15, 2017. Retrieved March 8, 2017. Java is on the wane, at least according to one outfit that keeps on eye on the ever-changing world of computer programming languages. For more than a decade, it has dominated the TIOBE Programming Community Index, and is back on top – a snapshot of software developer enthusiasm that looks at things like internet search results to measure how much buzz different languages have. But lately, Java has been slipping. ^ Chan, Rosalie (January 22, 2019). \"The 10 most popular programming languages, according to the \'Facebook for programmers\'\". Business Insider. Archived from the original on June 29, 2019. Retrieved June 29, 2019. ^ \"JavaOne 2013 Review: Java Takes on the Internet of Things\". www.oracle.com. Archived from the original on April 19, 2016. Retrieved June 19, 2016. ^ \"Why should I uninstall older versions of Java from my system?\". Oracle. Retrieved September 9, 2016. ^ Byous, Jon (c. 1998). \"Java technology: The early years\". Sun Developer Network. Sun Microsystems. Archived from the original on April 20, 2005. Retrieved April 22, 2005. ^ Object-oriented programming \"The History of Java Technology\". Sun Developer Network. c. 1995. Archived from the original on February 10, 2010. Retrieved April 30, 2010. ^ \"So why did they decide to call it Java? Archived November 15, 2013, at the Wayback Machine\", Kieron Murphy, JavaWorld.com, 10/04/96 ^ Kabutz, Heinz; Once Upon an Oak Archived April 13, 2007, at the Wayback Machine. Artima. Retrieved April 29, 2007. ^ \"JAVASOFT SHIPS JAVA 1.0\". Archived from the original on March 10, 2007. Retrieved May 13, 2018. ^ Object-oriented Programming with Java: Essentials and Applications. Tata McGraw-Hill Education. p. 34. ^ \"JSG – Java Study Group\". open-std.org. Archived from the original on August 25, 2006. Retrieved August 2, 2006. ^ \"Why Java™ Was – Not – Standardized Twice\" (PDF). Archived (PDF) from the original on January 13, 2014. Retrieved June 3, 2018. ^ \"What is ECMA—and why Microsoft cares\". Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ \"Java Community Process website\". Jcp.org. May 24, 2010. Archived from the original on August 8, 2006. Retrieved June 9, 2010. ^ \"JAVAONE: Sun – The bulk of Java is open sourced\". GrnLight.net. Archived from the original on May 27, 2014. Retrieved May 26, 2014. ^ \"Sun\'s Evolving Role as Java Evangelist\". O\'Reilly Media. Archived from the original on September 15, 2010. Retrieved August 2, 2009. ^ \"Oracle and Java\". oracle.com. Oracle Corporation. Archived from the original on January 31, 2010. Retrieved August 23, 2010. Oracle has been a leading and substantive supporter of Java since its emergence in 1995 and takes on the new role as steward of Java technology with a relentless commitment to fostering a community of participation and transparency.CS1 maint: BOT: original-url status unknown (link) ^ \"Learn About Java Technology\". Oracle. Archived from the original on November 24, 2011. Retrieved November 21, 2011. ^ Gosling, James (April 9, 2010). \"Time to move on...\" On a New Road. Archived from the original on November 5, 2010. Retrieved November 16, 2011.CS1 maint: BOT: original-url status unknown (link) ^ Topic, Dalibor. \"Moving to a Plugin-Free Web\". Archived from the original on March 16, 2016. Retrieved March 15, 2016. ^ \"JAVASOFT SHIPS JAVA 1.0\". Archived from the original on March 10, 2007. Retrieved February 5, 2008. ^ Chander, Sharat. \"Introducing Java SE 11\". oracle.com. Archived from the original on September 26, 2018. Retrieved September 26, 2018. ^ \"Java Card Overview\". Oracle Technology Network. Oracle. Archived from the original on January 7, 2015. Retrieved December 18, 2014. ^ \"Java Platform, Micro Edition (Java ME)\". Oracle Technology Network. Oracle. Archived from the original on January 4, 2015. Retrieved December 18, 2014. ^ \"Java SE\". Oracle Technology Network. Oracle. Archived from the original on December 24, 2014. Retrieved December 18, 2014. ^ \"Java Platform, Enterprise Edition (Java EE)\". Oracle Technology Network. Oracle. Archived from the original on December 17, 2014. Retrieved December 18, 2014. ^ \"Is the JVM (Java Virtual Machine) platform dependent or platform independent? What is the advantage of using the JVM, and having Java be a translated language?\". Programmer Interview. Archived from the original on January 19, 2015. Retrieved January 19, 2015. ^ Jelovic, Dejan. \"Why Java will always be slower than C++\". Archived from the original on February 11, 2008. Retrieved February 15, 2008. ^ Google. \"Loop Recognition in C++/Java/Go/Scala\" (PDF). Retrieved July 12, 2012. ^ \"Symantec\'s Just-In-Time Java Compiler To Be Integrated into Sun JDK 1.1\". Archived from the original on June 28, 2010. Retrieved August 1, 2009. ^ Salcic, Zoran; Park, Heejong; Teich, Jürgen; Malik, Avinash; Nadeem, Muhammad (July 22, 2017). \"Noc-HMP: A Heterogeneous Multicore Processor for Embedded Systems Designed in SystemJ\". ACM Transactions on Design Automation of Electronic Systems. 22 (4): 73. doi:10.1145/3073416. ISSN 1084-4309. ^ \"NullPointerException\". Oracle. Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ \"Exceptions in Java\". Artima.com. Archived from the original on January 21, 2009. Retrieved August 10, 2010. ^ \"Java HotSpot™ Virtual Machine Performance Enhancements\". Oracle.com. Archived from the original on May 29, 2017. Retrieved April 26, 2017. ^ \"Java HotSpot VM Options\". Oracle.com. September 7, 2010. Archived from the original on March 6, 2011. Retrieved June 30, 2012. ^ \"Garbage-First Collector\". docs.oracle.com. Archived from the original on March 9, 2016. Retrieved March 15, 2016. ^ \"Operator Overloading (C# vs Java)\". C# for Java Developers. Microsoft. Archived from the original on January 7, 2015. Retrieved December 10, 2014. ^ \"Multiple Inheritance of State, Implementation, and Type\". The Java™ Tutorials. Oracle. Archived from the original on November 9, 2014. Retrieved December 10, 2014. ^ \"Lesson: A Closer Look at the Hello World Application\". The Java™ Tutorials > Getting Started. Oracle Corporation. Archived from the original on March 17, 2011. Retrieved April 14, 2011. ^ \"Deprecated APIs, Features, and Options\". www.oracle.com. Retrieved May 31, 2019. ^ \"Java and Scala\'s Type Systems are Unsound\" (PDF). Archived (PDF) from the original on November 28, 2016. Retrieved February 20, 2017. ^ Arnold, Ken. \"Generics Considered Harmful\". java.net. Archived from the original on October 10, 2007. Retrieved September 10, 2015.CS1 maint: BOT: original-url status unknown (link) . More comments to the original article available at earlier archive snapshots like . ^ Jelovic, Dejan. \"Why Java Will Always Be Slower than C++\". www.jelovic.com. Archived from the original on February 11, 2008. Retrieved October 17, 2012. ^ Owens, Sean R. \"Java and unsigned int, unsigned short, unsigned byte, unsigned long, etc. (Or rather, the lack thereof)\". Archived from the original on February 20, 2009. Retrieved July 4, 2011. ^ Kahan, William. \"How Java\'s Floating-Point Hurts Everyone Everywhere\" (PDF). Electrical Engineering & Computer Science, University of California at Berkeley. Archived (PDF) from the original on September 5, 2012. Retrieved June 4, 2011. ^ \"Have you checked the Java?\". Archived from the original on September 21, 2012. Retrieved December 23, 2011. ^ Cadenhead, Rogers (November 20, 2017), Understanding How Java Programs Work, retrieved March 26, 2019 ^ Woolf, Nicky (May 26, 2016). \"Google wins six-year legal battle with Oracle over Android code copyright\". The Guardian. ISSN 0261-3077. Retrieved March 26, 2019. ^ \"Collections Framework Overview\". Java Documentation. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. ^ \"Java™ Security Overview\". Java Documentation. Oracle. Archived from the original on January 3, 2015. Retrieved December 18, 2014. ^ \"Trail: Internationalization\". The Java™ Tutorials. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. ^ \"How to Write Doc Comments for the Javadoc Tool\". Oracle Technology Network. Oracle. Archived from the original on December 18, 2014. Retrieved December 18, 2014. ^ Niccolai, James (January 23, 2001). \"Sun, Microsoft settle Java lawsuit\". JavaWorld. International Data Group. Archived from the original on May 28, 2008. Retrieved July 9, 2008. ^ van Gurp, Jilles (November 13, 2007). \"Google Android: Initial Impressions and Criticism\". Javalobby. Retrieved March 7, 2009. Frankly, I don\'t understand why Google intends to ignore the vast amount of existing implementation out there. It seems like a bad case of \"not invented here\" to me. Ultimately, this will slow adoption. There are already too many Java platforms for the mobile world and this is yet another one ^ Mullin, Joe. \"Google guilty of infringement in Oracle trial; future legal headaches loom\". Law & Disorder. Ars Technica. Archived from the original on May 8, 2012. Retrieved May 8, 2012. ^ Mullin, Joe (May 31, 2012). \"Google wins crucial API ruling, Oracle\'s case decimated\". Ars Technica. Archived from the original on March 12, 2017. Retrieved June 1, 2012. ^ Rosenblatt, Seth (May 9, 2014). \"Court sides with Oracle over Android in Java patent appeal\". CNET. Archived from the original on May 10, 2014. Retrieved May 10, 2014. ^ Mullin, Joe (May 26, 2016). \"Google beats Oracle—Android makes \"fair use\" of Java APIs\". Ars Technica. Archived from the original on January 20, 2017. Retrieved May 26, 2016. ^ Farivar, Cyrus (March 27, 2018). \"\"Google\'s use of the Java API packages was not fair,\" appeals court rules\". Ars Technica. Retrieved August 6, 2019. ^ Lee, Timothy (April 23, 2019). \"Google asks Supreme Court to overrule disastrous ruling on API copyrights\". Ars Technica. Retrieved April 23, 2019. References[edit] Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad; Buckley, Alex (2014). The Java® Language Specification (PDF) (Java SE 8 ed.). Gosling, James; Joy, Bill; Steele, Guy L., Jr.; Bracha, Gilad (2005). The Java Language Specification (3rd ed.). Addison-Wesley. ISBN 0-321-24678-0. Lindholm, Tim; Yellin, Frank (1999). The Java Virtual Machine Specification (2nd ed.). Addison-Wesley. ISBN 0-201-43294-3. External links[edit] Java (programming language)at Wikipedia\'s sister projects Definitions from Wiktionary Media from Wikimedia Commons News from Wikinews Quotations from Wikiquote Textbooks from Wikibooks Resources from Wikiversity Wikiversity has learning resources about Java Platform, Enterprise Edition/Java EE Tutorial v t e Java Platforms Java language JVM Micro Edition Standard Edition Enterprise Edition Java Card Android SDK Oracle technologies Squawk Java Development Kit OpenJDK Java virtual machine JavaFX Maxine VM Platform technologies Applets Servlets MIDlets JSP JSF Web Start (JNLP) Major third-party technologies Blackdown Eclipse GNU Classpath GWT Harmony Hibernate IcedTea Jazelle Spring Struts TopLink WildFly History Java version history Java Community Process Sun Microsystems Free Java implementations Major JVM languages BeanShell Clojure Groovy JRuby Jython Kotlin Processing Rhino Scala Community Conferences JavaOne Devoxx Organizations Apache Software Foundation Java Community Process Oracle Corporation Sun Microsystems, Sun Microsystems Laboratories People James Gosling Arthur van Hoff Urs Hölzle Patrick Naughton Category   Computer programming portal v t e Sun Microsystems (acquired by Oracle Corp, 2010) Hardware Sun-1 Sun-2 Sun-3 Sun386i Sun-4 SPARCstation Netra Ultra Enterprise Sun Blade Sun Fire SPARC Enterprise SPARC JavaStation Sun Ray Sun Modular Datacenter more... Software SunOS Solaris NIS (+) NFS ZFS SunView NeWS OpenWindows Java Desktop System Sun Studio Java StarOffice iPlanet, Sun ONE, Java Enterprise System Sun Secure Global Desktop MySQL Sun xVM GlassFish VirtualBox more... Storage StorageTek Sun Open Storage QFS ZFS High-performance computing Sun Cloud Sun Constellation System Sun Visualization System Sun Grid Engine Lustre Research Sun Labs picoJava Fortress Project Looking Glass Education SCPs BlueJ Community Common Development and Distribution License Java Community Process NetBeans OpenOffice.org OpenSolaris OpenSPARC OpenJDK OSUM People Bill Joy Andy Bechtolsheim Scott McNealy Vinod Khosla List of notable employees v t e Oracle Corporation Corporate directors Jeffrey Berg H. Raymond Bingham Michael Boskin Safra Catz Larry Ellison Héctor García-Molina Joseph Grundfest Jeffrey O. Henley Mark Hurd Jack F. Kemp Donald L. Lucas Naomi O. Seligman Acquisitions (list) Sun PeopleSoft Hyperion Siebel BEA JD Edwards RightNow Virtual Iron TimesTen Sunopsis NetSuite Databases Oracle Database MySQL InnoDB Berkeley DB TimesTen Rdb Essbase Programming languages Java PL/SQL IDEs JDeveloper Forms NetBeans Apex SQL Developer Developer Studio Middleware Fusion Middleware WebCenter SOA Suite WebLogic Server Coherence Tuxedo GlassFish Operating systems Oracle Linux Oracle Solaris Computer hardware Sun Fire SPARC (T-Series, Enterprise) StorageTek Computer appliances Oracle Exadata Oracle Exalogic Big Data Appliance Education and recognition Oracle Certification Program Category v t e Programming languages Comparison Timeline History APL Assembly BASIC C C++ C# COBOL Elixir Fortran Go Groovy Haskell Java JavaScript (JS) Julia Kotlin Lisp Lua MATLAB Objective-C OCaml Pascal Perl PHP Python R Ruby Rust Scala Shell Smalltalk Swift TypeScript Visual Basic .NET (VB.NET) more... Category Lists Alphabetical Categorical Generational Non-English-based v t e Free and open-source software General Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Software packages Audio Bioinformatics Codecs Collaboration Configuration management Device drivers Graphics Wireless Geophysics Health Mathematics Operating systems Programming languages Routing Statistics Television Video games Web applications Content management systems E-commerce Word processors Android apps iOS apps Commercial Trademarked Formerly proprietary Community Free software movement History Open-source-software movement Organizations Events Licenses AFL Apache APSL Artistic Beerware Boost BSD CC0 CDDL EPL Free Software Foundation GNU GPL GNU LGPL ISC MIT MPL Ms-PL/RL Python Python Software Foundation License Sleepycat Unlicense WTFPL zlib Types and standards Comparison of free and open-source software licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Viral license Challenges Digital rights management Firmware security Hardware restrictions License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Secure boot Software patents Software security Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Free and open-source software portal Category Commons WikiProject Book Authority control BNE: XX540033 BNF: cb12533207m (data) GND: 4401313-9 LCCN: sh95008574 Retrieved from \"https://en.wikipedia.org/w/index.php?title=Java_(programming_language)&oldid=924531367\" Categories: C programming language family Class-based programming languages Computer-related introductions in 1995 Concurrent programming languages Java (programming language) Java platform Java specification requests JVM programming languages Object-oriented programming languages Programming languages created in 1995 Programming languages Statically typed programming languages Sun Microsystems Hidden categories: Webarchive template wayback links CS1 maint: BOT: original-url status unknown Use mdy dates from August 2017 Articles with short description Pages using deprecated image syntax Articles containing potentially dated statements from 2019 All articles containing potentially dated statements Articles containing potentially dated statements from March 2019 Articles with obsolete information from July 2019 All Wikipedia articles in need of updating Wikipedia articles that may have off-topic paragraphs Articles with example Java code Articles needing additional references from May 2019 All articles needing additional references Articles with specifically marked weasel-worded phrases from September 2015 Wikipedia articles with BNE identifiers Wikipedia articles with BNF identifiers Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page In other projects Wikimedia Commons Wikibooks Wikiquote Wikiversity Print/export Create a book Download as PDF Printable version Languages Acèh Afrikaans ???? ??????? Aragonés ??????? Asturianu Az?rbaycanca ?????? ????? Bân-lâm-gú ?????????? ?????????? (???????????)? ????????? Bosanski Català ??????? ?eština Corsu Cymraeg Dansk Deutsch Eesti ???????? Español Esperanto Estremeñu Euskara ????? Français Gaeilge Galego ??????? ???/Hak-kâ-ngî ??? ??????? ?????? Hrvatski Bahasa Indonesia Interlingua Íslenska Italiano ????? ????? ??????? ??????? Kreyòl ayisyen ???????? Latina Latviešu Lietuvi? Ligure Lumbaart Magyar ?????????? ?????? ????? Bahasa Melayu Minangkabau Mìng-d??ng-ng?? ?????? ?????????? Nederlands ?????? ??? Norsk Norsk nynorsk Occitan ????? O?zbekcha/??????? ?????? Polski Português Qaraqalpaqsha Român? ??????? ???? ???? Scots Shqip ????? Simple English ???? Sloven?ina Slovenš?ina Soomaaliga ????? ?????? / srpski Srpskohrvatski / ?????????????? Suomi Svenska Tagalog ????? Taqbaylit ???????/tatarça ?????? ??? ?????? Türkçe ?? ???? ?????????? Vèneto Ti?ng Vi?t ?? Winaray ?? ?? Žemait?ška ?? Edit links This page was last edited on 4 November 2019, at 12:27 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view','Java (programming language) - Wikipedia');

/*Table structure for table `context2` */

DROP TABLE IF EXISTS `context2`;

CREATE TABLE `context2` (
  `uid` varchar(100) DEFAULT NULL,
  `lamda3` varchar(100) DEFAULT NULL,
  `lamda2` varchar(100) DEFAULT NULL,
  `lamda1` varchar(500) DEFAULT NULL,
  `user_` varchar(500) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `context2` */

insert  into `context2`(`uid`,`lamda3`,`lamda2`,`lamda1`,`user_`) values ('1','Busy','Programming','Editplus','sajid24x7@gmail.com'),('1','Busy','Programming','Tomcat','sajid24x7@gmail.com'),('1','Busy','ReadWrite','Winword','sajid24x7@gmail.com'),('2','Busy','Programming','Editplus','sajid24x7@gmail.com'),('2','Busy','Programming','Tomcat','sajid24x7@gmail.com'),('2','Busy','ReadWrite','Winword','sajid24x7@gmail.com'),('3','Busy','Programming','Editplus','sajid24x7@gmail.com'),('3','Busy','Programming','Tomcat','sajid24x7@gmail.com'),('3','Busy','ReadWrite','Winword','sajid24x7@gmail.com'),('4','Busy','Programming','Editplus','sajid24x7@gmail.com'),('4','Busy','Programming','Tomcat','sajid24x7@gmail.com'),('4','Busy','ReadWrite','Winword','sajid24x7@gmail.com'),('5','Busy','Programming','Editplus','sajid24x7@gmail.com'),('5','Busy','Programming','Tomcat','sajid24x7@gmail.com'),('5','Busy','ReadWrite','Winword','sajid24x7@gmail.com'),('6','Busy','Programming','Editplus','sajid24x7@gmail.com'),('6','Busy','Programming','Tomcat','sajid24x7@gmail.com'),('6','Busy','ReadWrite','Winword','sajid24x7@gmail.com');

/*Table structure for table `feedback` */

DROP TABLE IF EXISTS `feedback`;

CREATE TABLE `feedback` (
  `n` int(11) DEFAULT '1',
  `u` int(11) DEFAULT '1',
  `m` int(11) DEFAULT '1',
  `q` int(11) DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `feedback` */

insert  into `feedback`(`n`,`u`,`m`,`q`) values (27,23,20,6);

/*Table structure for table `graph` */

DROP TABLE IF EXISTS `graph`;

CREATE TABLE `graph` (
  `sno` varchar(10) DEFAULT NULL,
  `FindRate` double DEFAULT NULL,
  `AvgPrecision` double DEFAULT NULL,
  `AvgRecall` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `graph` */

insert  into `graph`(`sno`,`FindRate`,`AvgPrecision`,`AvgRecall`) values ('0',0.16666666666666666,0.12345679012345678,0.14492753623188406);

/*Table structure for table `location` */

DROP TABLE IF EXISTS `location`;

CREATE TABLE `location` (
  `email` varchar(100) NOT NULL,
  `ip` varchar(100) DEFAULT NULL,
  `location` varchar(100) NOT NULL,
  PRIMARY KEY (`email`,`location`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `location` */

insert  into `location`(`email`,`ip`,`location`) values ('sajid24x7@gmail.com','183.83.168.168','Home'),('sajid24x7@gmail.com','183.83.74.128','Office');

/*Table structure for table `score` */

DROP TABLE IF EXISTS `score`;

CREATE TABLE `score` (
  `uid` varchar(100) DEFAULT NULL,
  `uri` varchar(500) DEFAULT NULL,
  `impr` double DEFAULT NULL,
  `context` double DEFAULT NULL,
  `rank` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `score` */

insert  into `score`(`uid`,`uri`,`impr`,`context`,`rank`) values ('4','en.wikipedia.org/wiki/Java_(programming_language)',0.5651367,0.008312552,0.004697728),('5','www.java.com/',1.1896921,0.0015981385,0.0019012928),('3','www.javatpoint.com/java-swing',0.11351002,0.039976723,0.004537759),('2','www.tutorialspoint.com/java/index.htm',0.086358026,0.1999418,0.017266579);

/*Table structure for table `starttime` */

DROP TABLE IF EXISTS `starttime`;

CREATE TABLE `starttime` (
  `user` varchar(100) NOT NULL,
  `context` varchar(100) NOT NULL,
  `date_` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`user`,`context`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `starttime` */

/*Table structure for table `users` */

DROP TABLE IF EXISTS `users`;

CREATE TABLE `users` (
  `uid` int(11) DEFAULT NULL,
  `name` varchar(100) DEFAULT NULL,
  `lname` varchar(100) NOT NULL,
  `pwd` varchar(100) DEFAULT NULL,
  `email` varchar(100) NOT NULL,
  `tele` varchar(100) DEFAULT NULL,
  `country` varchar(100) DEFAULT NULL,
  `city` varchar(100) DEFAULT NULL,
  `zip` varchar(100) DEFAULT NULL,
  `gen` varchar(10) DEFAULT NULL,
  `addr` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `users` */

insert  into `users`(`uid`,`name`,`lname`,`pwd`,`email`,`tele`,`country`,`city`,`zip`,`gen`,`addr`) values (1,'sajid','Md','sajid','sajid24x7@gmail.com','9985714374','India','sajid','555555',NULL,'hyd');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
